{"version":3,"sources":["models/entry.js","models/paper.js","game.js","styles.js","button.js","draw.js","write.js","board.js","LobbyRenderer.js","logo.js","header.js","App.js","serviceWorker.js","index.js"],"names":["Entry","number","this","writing","drawing","author","entryFilledIn","entry","paperHasCompletedEntry","paper","entryNumber","entries","length","Paper","player","numEntries","Array","fill","i","Game","name","setup","ctx","numPlayers","numberOfRounds","papers","playerIdsToPaperIdx","currentSubmissionMethod","turn","onBegin","G","onEnd","currentHand","newHand","Object","keys","forEach","playerId","previousIdx","nextIdx","endIf","every","activePlayers","all","moveLimit","stages","submit","moves","SubmitWriting","playerID","paperIndex","SubmitDrawing","minPlayers","maxPlayers","colors","sizes","styles","StyleSheet","create","main","height","borderRadius","fontWeight","borderColor","borderWidth","outline","primary","backgroundColor","color","secondary","Button","onClick","children","type","isPrimary","isSecondary","className","css","container","display","flexDirection","alignItems","canvas","buttonsContainer","Drawer","props","onImageSelected","previousPhrase","videoEl","useRef","canvasEl","useState","imageData","setImageData","useEffect","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","play","header","promptContainer","drawingContainer","ref","autoPlay","width","src","alt","getContext","drawImage","toDataURL","input","fontSize","marginBottom","Writer","onPhraseChosen","previousDrawingUri","React","setWriting","firstTime","title","prompt","placeholder","value","onChange","event","target","minHeight","position","justifyContent","paddingTop","innerContainer","flexGrow","cardContainer","marginTop","card","padding","borderStyle","Card","Board","_","gameover","currentPageIdx","latestEnt","slice","reverse","find","latestDrawingUri","latestWriting","details","drawingUri","mainContainer","headerContainer","headerLeft","flex","textAlign","headerMiddle","headerRight","NameChooser","currentPlayerName","onEnter","playerName","setPlayerName","ExistingGameChooser","rooms","handleJoinRoom","handleLeaveRoom","handleStartGame","games","map","room","key","gameID","ExistingGame","gameName","players","playerNames","p","join","playerSeat","playerIsSeated","freeSeat","freeSeatsAvailable","playerCanJoin","playerCanLeave","playerCanEnter","id","NewGameCreator","createGame","game","setGame","setNumPlayers","selectedGameName","gameOptions","g","matchingGame","createNumPlayersRange","idx","RunningGameHeader","runningGame","runningRoom","handleExitRoom","RunningGame","app","credentials","Lobby","errorMsg","gameComponents","phase","handleEnterLobby","handleCreateRoom","handleExitLobby","handleRefreshRooms","LobbyRenderer","gameInstances","text","fontFamily","margin","Logo","paddingBottom","borderBottomWidth","borderBottomColor","borderBottomStyle","Header","importedGames","board","App","gameServer","lobbyServer","renderer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d4dc230.chunk.js","sourcesContent":["export class Entry {\n  constructor(number) {\n    this.number = number;\n    this.writing = null;\n    this.drawing = null;\n    this.author = null;\n  }\n}\n\nexport function entryFilledIn(entry) {\n  return entry.drawing != null || entry.writing != null;\n}\n\nexport function entryNotFilledIn(entry) {\n  return !entryFilledIn(entry);\n}\n","import { Entry, entryFilledIn, entryNotFilledIn } from \"./entry\";\n\nexport function paperHasCompletedEntry(paper, entryNumber) {\n  if (entryNumber < 0 || entryNumber >= paper.entries.length) {\n    return false;\n  }\n  return entryFilledIn(paper.entries[entryNumber]);\n}\n\nexport function unfilledEntry(paper) {\n  return paper.entries.find(entry => entryNotFilledIn(entry));\n}\n\nexport function latestEntry(paper) {\n  return paper.entries\n    .slice()\n    .reverse()\n    .find(entry => entryFilledIn(entry));\n}\n\nexport class Paper {\n  constructor(player, numEntries) {\n    this.player = player;\n    this.entries = Array(numEntries).fill(null);\n    for (let i = 0; i < numEntries; i++) {\n      this.entries[i] = new Entry(i);\n    }\n  }\n}\n","import { Paper, paperHasCompletedEntry } from \"./models/paper\";\n\n// TURN\nfunction OnBegin(G, ctx) {\n  G.currentSubmissionMethod = ctx.turn % 2 === 0 ? \"draw\" : \"write\";\n}\n\n// TURN\nfunction OnEnd(G, ctx) {\n  // Exchange Papers\n  const { numPlayers } = ctx;\n  const currentHand = G.playerIdsToPaperIdx;\n  const newHand = {};\n  Object.keys(currentHand).forEach(playerId => {\n    const previousIdx = currentHand[playerId];\n    const nextIdx = (numPlayers + previousIdx - 1) % numPlayers;\n    newHand[playerId] = nextIdx;\n  });\n  return {\n    ...G,\n    playerIdsToPaperIdx: newHand\n  };\n}\n\n// MOVE\nfunction SubmitWriting(G, ctx, writing, ...args) {\n  const { playerID, turn } = ctx;\n  const paperIndex = G.playerIdsToPaperIdx[playerID];\n  G.papers[paperIndex].entries[turn - 1] = {\n    ...G.papers[paperIndex].entries[turn - 1],\n    writing,\n    author: playerID\n  };\n}\n\n// MOVE\nfunction SubmitDrawing(G, ctx, drawing) {\n  const { playerID, turn } = ctx;\n  const paperIndex = G.playerIdsToPaperIdx[playerID];\n  G.papers[paperIndex].entries[turn - 1] = {\n    ...G.papers[paperIndex].entries[turn - 1],\n    drawing,\n    author: playerID\n  };\n}\n\nfunction isTurnFinished(G, ctx) {\n  // The turn is finished when every paper has a complete\n  // entry for the currentEntry\n  const { turn } = ctx;\n  return G.papers.every(paper => paperHasCompletedEntry(paper, turn - 1));\n}\n\nfunction isGameFinished(G) {\n  // The game is finished when there is a filled in entry for the Nth round\n  const { numberOfRounds, papers } = G;\n  const isFinished = papers.every(paper =>\n    paperHasCompletedEntry(paper, numberOfRounds - 1)\n  );\n\n  if (isFinished) {\n    return {};\n  }\n\n  // Not finished\n  return null;\n}\n\nexport const Game = {\n  name: \"paper-telephone\",\n\n  setup: ctx => {\n    const numPlayers = ctx.numPlayers;\n    const numberOfRounds = numPlayers * 2;\n    const papers = Array(numPlayers);\n    const playerIdsToPaperIdx = {};\n    for (let i = 0; i < numPlayers; i++) {\n      papers[i] = new Paper(i, numberOfRounds);\n      playerIdsToPaperIdx[`${i}`] = i;\n    }\n\n    return {\n      papers: papers,\n      numberOfRounds: numberOfRounds,\n      currentSubmissionMethod: null,\n      playerIdsToPaperIdx: playerIdsToPaperIdx\n    };\n  },\n\n  turn: {\n    onBegin: OnBegin,\n    onEnd: OnEnd,\n    endIf: isTurnFinished,\n    activePlayers: { all: \"submit\", moveLimit: 1 },\n    stages: {\n      submit: {\n        moves: {\n          SubmitWriting,\n          SubmitDrawing\n        }\n      }\n    }\n  },\n\n  moves: {},\n\n  endIf: isGameFinished,\n\n  minPlayers: 2,\n  maxPlayers: 10\n};\n\nexport default Game;\n","export const colors = {\n  pinkVeryLight: \"#ffffff\",\n  pinkLight: \"#fae3d9\",\n  pinkDark: \"#ffb6b9\",\n  blueLight: \"#bbded6\",\n  blueDark: \"#8ac6d1\",\n  black: \"#1C2826\"\n};\n\nexport const sizes = {\n  cardWidth: \"750px\",\n  textLarge: \"18pt\"\n};\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  main: {\n    height: \"30px\",\n    borderRadius: \"10px\",\n    fontWeight: \"bold\",\n    borderColor: colors.blueLight,\n    borderWidth: \"2px\",\n    outline: \"none\"\n  },\n  primary: {\n    backgroundColor: colors.blueLight,\n    color: colors.pinkVeryLight\n  },\n  secondary: {\n    color: colors.blueLight\n  }\n});\n\nexport default function Button({ onClick, children, type }) {\n  const isPrimary = type === \"primary\";\n  const isSecondary = type !== \"primary\";\n\n  return (\n    <button\n      className={css(\n        styles.main,\n        isPrimary && styles.primary,\n        isSecondary && styles.secondary\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport Button from \"button\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  canvas: {\n    display: \"none\"\n  },\n  buttonsContainer: {\n    display: \"flex\"\n  }\n});\n\nfunction Drawer(props) {\n  const { onImageSelected, previousPhrase } = props;\n\n  const videoEl = useRef(null);\n  const canvasEl = useRef(null);\n\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    if (!videoEl || imageData) {\n      return;\n    }\n    navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {\n      let video = videoEl.current;\n      video.srcObject = stream;\n      video.play();\n    });\n  }, [videoEl, imageData]);\n\n  const handleTakePicClick = () => {\n    var ctx = canvasEl.current.getContext(\"2d\");\n    ctx.drawImage(\n      videoEl.current,\n      0,\n      0,\n      canvasEl.current.width,\n      canvasEl.current.height\n    );\n    setImageData(canvasEl.current.toDataURL(\"image/jpeg\"));\n  };\n\n  const handleClick = () => {\n    if (onImageSelected) {\n      onImageSelected(imageData);\n    }\n  };\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.header)}>\n        <p>Time to draw!</p>\n      </div>\n      <div className={css(styles.promptContainer)}>\n        <p>Can you draw this phrase and take a picture of it?</p>\n        <p>{previousPhrase}</p>\n      </div>\n      <div className={css(styles.drawingContainer)}>\n        {!imageData && (\n          <>\n            <video ref={videoEl} autoPlay={true}></video>\n            <canvas\n              className={css(styles.canvas)}\n              ref={canvasEl}\n              width={640}\n              height={480}\n            ></canvas>\n          </>\n        )}\n        {imageData && <img src={imageData} alt=\"Foo\" />}\n      </div>\n      <div className={css(styles.buttonsContainer)}>\n        {!imageData && (\n          <Button type=\"primary\" onClick={handleTakePicClick}>\n            Take picture\n          </Button>\n        )}\n        {imageData && (\n          <Button type=\"primary\" onClick={handleClick}>\n            Submit\n          </Button>\n        )}\n        {imageData && (\n          <Button onClick={() => setImageData(null)}>\n            Take a different picture\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Drawer;\n","import React from \"react\";\nimport { sizes } from \"styles\";\nimport Button from \"button\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  input: {\n    // height: \"200px\",\n    fontSize: sizes.textLarge,\n    marginBottom: \"10px\"\n  }\n});\n\nfunction Writer(props) {\n  const { onPhraseChosen, previousDrawingUri } = props;\n\n  const [writing, setWriting] = React.useState(\"\");\n\n  const handleWritingChange = event => {\n    setWriting(event.target.value);\n  };\n\n  const handleClick = () => {\n    onPhraseChosen(writing);\n  };\n\n  const firstTime = previousDrawingUri == null;\n\n  const firstTimeTitle = \"Lets Begin!\";\n  const guessDrawingTitle = \"Guess that phrase!\";\n  const title = firstTime ? firstTimeTitle : guessDrawingTitle;\n\n  const firstTimePrompt =\n    \"Enter a phrase that the next person will have to draw out.\";\n  const guessDrawingPrompt =\n    \"Take a look at the picture that the person before you drew. What do you think the word or phrase is?\";\n  const prompt = firstTime ? firstTimePrompt : guessDrawingPrompt;\n\n  return (\n    <div className={css(styles.container)}>\n      <p>{title}</p>\n      {previousDrawingUri && (\n        <img src={previousDrawingUri} width=\"640\" height=\"480\" alt=\"Foo\" />\n      )}\n      <p>{prompt}</p>\n      <input\n        className={css(styles.input)}\n        type=\"text\"\n        placeholder=\"Enter a phrase here\"\n        value={writing}\n        onChange={handleWritingChange}\n      />\n      <Button type=\"primary\" onClick={handleClick}>\n        Submit\n      </Button>\n    </div>\n  );\n}\n\nexport default Writer;\n","import React from \"react\";\nimport Drawer from \"./draw\";\nimport Writer from \"./write\";\nimport { latestEntry } from \"./models/paper\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"./styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    minHeight: \"100%\",\n    position: \"absolute\",\n    backgroundColor: colors.blueLight,\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"15px\"\n  },\n  innerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  main: {\n    flexGrow: 1\n  },\n  cardContainer: {\n    marginTop: \"35px\"\n  },\n  card: {\n    width: sizes.cardWidth,\n    backgroundColor: \"white\",\n    padding: \"25px\",\n    borderWidth: \"2px\",\n    borderRadius: \"25px\",\n    borderColor: colors.blueLight,\n    borderStyle: \"solid\"\n  }\n});\n\nfunction Card({ children }) {\n  return <div className={css(styles.card)}>{children}</div>;\n}\n\nfunction Board(props) {\n  const { moves, _, G, ctx, playerID } = props;\n\n  const handleSubmitWriting = writing => {\n    moves.SubmitWriting(writing);\n  };\n\n  const handleSubmitDrawing = drawingUri => {\n    moves.SubmitDrawing(drawingUri);\n  };\n\n  if (ctx.gameover) {\n    return (\n      <div className={css(styles.container)}>\n        <h1>Game over!</h1>\n      </div>\n    );\n  }\n\n  if (!playerID) {\n    return (\n      <div className={css(styles.container)}>\n        <div className={css(styles.innerContainer)}>\n          <div className={css(styles.cardContainer)}>\n            <Card>\n              <h1>Unknown Player</h1>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const currentPageIdx = G.playerIdsToPaperIdx[playerID];\n  const currentPage = G.papers[currentPageIdx];\n  const latestEnt = latestEntry(currentPage);\n\n  let latestDrawingUri = null;\n  let latestWriting = null;\n\n  if (latestEnt && G.currentSubmissionMethod === \"write\") {\n    latestDrawingUri = latestEnt.drawing;\n  }\n\n  if (latestEnt && G.currentSubmissionMethod === \"draw\") {\n    latestWriting = latestEnt.writing;\n  }\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.innerContainer)}>\n        <div className={css(styles.cardContainer)}>\n          <Card>\n            <div className={css(styles.details)}>\n              <p>\n                The current turn is: {ctx.turn}, which means its time to:{\" \"}\n                {G.currentSubmissionMethod}\n              </p>\n              <p>\n                There are {ctx.numPlayers} players. You are player {playerID}\n              </p>\n            </div>\n          </Card>\n        </div>\n        <div className={css(styles.cardContainer)}>\n          <Card>\n            <div className={css(styles.main)}>\n              {G.currentSubmissionMethod === \"write\" &&\n                ctx.activePlayers[playerID] && (\n                  <Writer\n                    onPhraseChosen={handleSubmitWriting}\n                    previousDrawingUri={latestDrawingUri}\n                  />\n                )}\n              {G.currentSubmissionMethod === \"draw\" &&\n                ctx.activePlayers[playerID] && (\n                  <Drawer\n                    onImageSelected={handleSubmitDrawing}\n                    previousPhrase={latestWriting}\n                  />\n                )}\n              {!ctx.activePlayers[playerID] && (\n                <p>Waiting for others to finish their move</p>\n              )}\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\"\n  },\n  mainContainer: {\n    flexGrow: \"1\"\n  },\n  headerContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    width: \"100%\"\n  },\n  headerLeft: {\n    flex: 1,\n    textAlign: \"left\"\n  },\n  headerMiddle: {\n    flex: 1,\n    textAlign: \"center\"\n  },\n  headerRight: {\n    flex: 1,\n    textAlign: \"right\"\n  }\n});\n\nfunction NameChooser({ currentPlayerName, onEnter }) {\n  const [playerName, setPlayerName] = React.useState(currentPlayerName);\n\n  const handleInputChange = event => {\n    setPlayerName(event.target.value);\n  };\n\n  const onClickEnter = () => {\n    if (playerName === \"\") return;\n    onEnter(playerName);\n  };\n\n  return (\n    <div>\n      <p className=\"phase-title\">Choose a player name:</p>\n      <input type=\"text\" value={playerName} onChange={handleInputChange} />\n      <span className=\"buttons\">\n        <button className=\"buttons\" onClick={onClickEnter}>\n          Enter\n        </button>\n      </span>\n    </div>\n  );\n}\n\nfunction ExistingGameChooser({\n  rooms,\n  playerName,\n  handleJoinRoom,\n  handleLeaveRoom,\n  handleStartGame\n}) {\n  const games = rooms.map(room => (\n    <div key={room.gameID}>\n      <ExistingGame\n        room={room}\n        playerName={playerName}\n        handleJoinRoom={handleJoinRoom}\n        handleLeaveRoom={handleLeaveRoom}\n        handleStartGame={handleStartGame}\n      />\n    </div>\n  ));\n  return (\n    <div>\n      <p>Choose an existing game to play</p>\n      <p>There are {rooms.length} games running atm</p>\n      {games}\n    </div>\n  );\n}\n\nfunction ExistingGame({\n  room,\n  playerName,\n  handleJoinRoom,\n  handleLeaveRoom,\n  handleStartGame\n}) {\n  const { gameID, gameName, players } = room;\n  const playerNames = players.map(p => p.name).join(\",\");\n  const playerSeat = players.find(p => p.name === playerName);\n  const playerIsSeated = playerSeat != null;\n  const freeSeat = players.find(p => !p.name);\n  const freeSeatsAvailable = freeSeat != null;\n  const gameIsFullySeated = !freeSeatsAvailable;\n  const playerCanJoin = !playerIsSeated && freeSeatsAvailable;\n  const playerCanLeave = playerIsSeated;\n  const playerCanEnter = playerIsSeated && gameIsFullySeated;\n\n  const startGame = () => {\n    handleStartGame(gameName, {\n      gameID: gameID,\n      playerID: \"\" + playerSeat.id,\n      numPlayers: players.length\n    });\n  };\n\n  const joinGame = () => {\n    handleJoinRoom(gameName, gameID, \"\" + freeSeat.id);\n  };\n\n  const leaveGame = () => {\n    handleLeaveRoom(gameName, gameID);\n  };\n\n  return (\n    <div>\n      <p>\n        Game: {gameName} (id: {gameID})\n      </p>\n      <p>Players Seated: {playerNames}</p>\n      {playerCanEnter && <button onClick={startGame}>Enter</button>}\n      {playerCanJoin && <button onClick={joinGame}>Join</button>}\n      {playerCanLeave && <button onClick={leaveGame}>Leave</button>}\n    </div>\n  );\n}\n\nfunction NewGameCreator({ games, createGame }) {\n  const [game, setGame] = React.useState(games[0]);\n  const [numPlayers, setNumPlayers] = React.useState(2);\n\n  const selectedGameName = game ? game.game.name : \"--\";\n\n  const gameOptions = games.map(g => (\n    <option key={g.game.name} value={g.game.name}>\n      {g.game.name}\n    </option>\n  ));\n\n  const onClick = () => {\n    createGame(selectedGameName, numPlayers);\n  };\n\n  const onGameSelected = event => {\n    const name = event.target.value;\n    if (name === \"\") {\n      setGame(null);\n      return;\n    }\n    const matchingGame = games.find(g => g.game.name === name);\n    setGame(matchingGame);\n  };\n\n  const onNumPlayersSelected = event => {\n    const numPlayers = event.target.value;\n    setNumPlayers(numPlayers);\n  };\n\n  const createNumPlayersOption = idx => {\n    return (\n      <option key={\"num-option-\" + idx} value={idx}>\n        {idx}\n      </option>\n    );\n  };\n\n  const createNumPlayersRange = game => {\n    return [...new Array(game.game.maxPlayers + 1).keys()].slice(\n      game.game.minPlayers\n    );\n  };\n\n  return (\n    <div>\n      <p>Lets create a new game</p>\n      <p>Which game do you want to play?</p>\n      <select value={selectedGameName} onChange={onGameSelected}>\n        <option value=\"\">Select Game</option>\n        {gameOptions}\n      </select>\n      <p>And how many players?</p>\n      <select value={numPlayers} onChange={onNumPlayersSelected}>\n        {createNumPlayersRange(game).map(createNumPlayersOption)}\n      </select>\n      <button onClick={onClick}>Create</button>\n    </div>\n  );\n}\n\nfunction RunningGameHeader({\n  runningGame,\n  runningRoom,\n  playerName,\n  handleExitRoom\n}) {\n  const gameName =\n    runningRoom.gameName === \"paper-telephone\"\n      ? \"Paper Telephone\"\n      : \"Unknown Game\";\n  const exitGame = () => {\n    handleExitRoom();\n  };\n  return (\n    <div className={css(styles.headerContainer)}>\n      <div className={css(styles.headerLeft)}>\n        <button onClick={exitGame}>Leave and return to Lobby</button>\n      </div>\n      <div className={css(styles.headerMiddle)}>Now playing: {gameName}</div>\n      <div className={css(styles.headerRight)}>Playing as: {playerName}</div>\n    </div>\n  );\n}\n\nfunction RunningGame(props) {\n  const { runningGame, rooms, playerName, handleExitRoom } = props;\n  const runningRoom = rooms.find(room => room.gameID === runningGame.gameID);\n  return (\n    <div>\n      <RunningGameHeader\n        runningGame={runningGame}\n        runningRoom={runningRoom}\n        playerName={playerName}\n        handleExitRoom={handleExitRoom}\n      />\n      <runningGame.app\n        gameID={runningGame.gameID}\n        playerID={runningGame.playerID}\n        credentials={runningGame.credentials}\n      />\n    </div>\n  );\n}\n\nfunction Lobby(props) {\n  const {\n    errorMsg,\n    gameComponents,\n    rooms,\n    phase,\n    playerName,\n    runningGame,\n    handleEnterLobby,\n    handleExitLobby,\n    handleCreateRoom,\n    handleJoinRoom,\n    handleLeaveRoom,\n    handleExitRoom,\n    handleRefreshRooms,\n    handleStartGame\n  } = props;\n  return (\n    <div>\n      <NameChooser currentPlayerName={playerName} onEnter={handleEnterLobby} />\n      <ExistingGameChooser\n        rooms={rooms}\n        playerName={playerName}\n        handleJoinRoom={handleJoinRoom}\n        handleLeaveRoom={handleLeaveRoom}\n        handleStartGame={handleStartGame}\n      />\n      <NewGameCreator games={gameComponents} createGame={handleCreateRoom} />\n    </div>\n  );\n}\n\nexport default function LobbyRenderer(props) {\n  const {\n    errorMsg,\n    gameComponents,\n    gameInstances,\n    phase,\n    playerName,\n    runningGame,\n    handleEnterLobby,\n    handleExitLobby,\n    handleCreateRoom,\n    handleJoinRoom,\n    handleLeaveRoom,\n    handleExitRoom,\n    handleRefreshRooms,\n    handleStartGame\n  } = props;\n  return (\n    <div className={css(styles.container)}>\n      {runningGame && <RunningGame {...props} />}\n      {!runningGame && <Lobby {...props} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  text: {\n    fontFamily: [\"Fredoka One\", \"cursive\"],\n    color: colors.blueLight,\n    padding: 0,\n    margin: 0\n  }\n});\n\nexport default function Logo() {\n  return (\n    <div>\n      <h1 className={css(styles.text)}>Paper Gamer!</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Logo from \"logo\";\nimport { colors } from \"styles\";\n\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"4px\",\n    paddingBottom: \"4px\",\n    backgroundColor: colors.pinkVeryLight,\n    borderBottomWidth: \"2px\",\n    borderBottomColor: colors.blueLight,\n    borderBottomStyle: \"solid\"\n  }\n});\n\nfunction Header() {\n  return (\n    <div className={css(styles.container)}>\n      <Logo />\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Game from \"game\";\nimport Board from \"board\";\nimport LobbyRenderer from \"LobbyRenderer\";\nimport Header from \"header\";\nimport { Lobby, Client } from \"boardgame.io/react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors } from \"./styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  header: {},\n  main: {\n    flexGrow: 1,\n    display: \"relative\"\n  }\n});\n\nconst importedGames = [\n  {\n    game: Game,\n    board: Board\n  }\n];\n\n// let BoardGameIo = null;\n// if (process.env.NODE_ENV === \"development\") {\n//   BoardGameIo = Client({\n//     game: Game,\n//     board: Board\n//   });\n// } else {\n//   BoardGameIo = () => (\n//     <Lobby\n//       gameServer={`https://games-server.oliverwilkie.com`}\n//       lobbyServer={`https://games-server.oliverwilkie.com`}\n//       gameComponents={importedGames}\n//     />\n//   );\n// }\n\nfunction App() {\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.header)}>\n        <Header />\n      </div>\n      <div className={css(styles.main)}>\n        {/* <BoardGameIo /> */}\n        <Lobby\n          gameServer={`https://games-server.oliverwilkie.com`}\n          lobbyServer={`https://games-server.oliverwilkie.com`}\n          gameComponents={importedGames}\n          renderer={LobbyRenderer}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}