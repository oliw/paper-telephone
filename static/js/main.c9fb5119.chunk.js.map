{"version":3,"sources":["model/telephone/entry.js","model/telephone/paper.js","model/telephone/game.js","styles.js","common/button.js","components/telephone/draw.js","components/telephone/write.js","common/card.js","helpers.js","components/telephone/summary.js","components/telephone/board.js","model/saladbowl/game.js","common/text.js","components/saladbowl/phases/pickgroups/picker.js","components/saladbowl/phases/pickgroups/spectator.js","components/saladbowl/phases/pickgroups.js","common/textinput.js","components/saladbowl/phases/buildbowl/writethings.js","components/saladbowl/phases/buildbowl.js","components/saladbowl/phases/play/describe.js","components/saladbowl/phases/play/guess.js","components/saladbowl/phases/play.js","components/saladbowl/group.js","components/saladbowl/status.js","common/game.js","components/saladbowl/board.js","components/lobby/RunningGame.js","components/player.js","components/lobby/Lobby.js","components/lobby/LobbyRenderer.js","components/logo.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Entry","number","this","writing","drawing","author","entryFilledIn","entry","paperHasCompletedEntry","paper","entryNumber","entries","length","Paper","player","numEntries","Array","fill","i","Game","name","setup","ctx","numPlayers","numberOfRounds","papers","playerIdsToPaperIdx","currentSubmissionMethod","turn","onBegin","G","onEnd","currentHand","newHand","Object","keys","forEach","playerId","previousIdx","nextIdx","endIf","every","activePlayers","all","moveLimit","stages","submit","moves","SubmitWriting","playerID","paperIndex","SubmitDrawing","minPlayers","maxPlayers","colors","sizes","styles","StyleSheet","create","main","height","borderRadius","fontWeight","backgroundColor","borderColor","color","borderWidth","outline","cursor","boxShadow","primary","secondary","Button","onClick","children","type","isPrimary","isSecondary","className","css","container","display","flexDirection","alignItems","canvas","buttonsContainer","Drawer","props","onImageSelected","previousPhrase","videoEl","useRef","canvasEl","useState","imageData","setImageData","useEffect","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","play","header","promptContainer","drawingContainer","ref","autoPlay","width","src","alt","getContext","drawImage","toDataURL","input","fontSize","marginBottom","Writer","onPhraseChosen","previousDrawingUri","React","setWriting","firstTime","title","prompt","placeholder","value","onChange","event","target","card","padding","borderStyle","textAlign","fontFamily","margin","Card","nameFromId","gameMetadata","isArray","find","e","id","toColor","str","hash","charCodeAt","colour","toString","substr","text","WrittenEntry","first","DrawnEntry","PaperSummary","summaries","map","idx","key","Summary","game","currentPaperIdx","setCurrentPaperIdx","minHeight","position","justifyContent","paddingTop","innerContainer","flexGrow","cardContainer","marginTop","Board","_","gameover","currentPageIdx","currentPage","latestEnt","slice","reverse","latestDrawingUri","latestWriting","details","drawingUri","PhaseTurn","wordsInBowl","random","Shuffle","countdownStartedAt","currentWord","push","groups","groupOrderPos","playOrderPos","players","order","currentGroup","next","PhaseMoves","StartTheClock","_ctx","currentTime","words","pop","ScoreWord","currentPlayer","group","includes","score","wordsCollected","PhaseEndIf","PhaseOnEnd","wordsToReturn","countdownSeconds","wordsWrittenPerPlayer","phases","PickGroups","start","ChooseGroups","wordsPerPlayer","g","flat","BuildBowl","WriteThings","AddWords","DescribeThings","DescribeThingsOneWord","ActItOut","reduce","a","b","Text","style","teamSizeContainer","Picker","playOrder","numGroups","setNumGroups","setGroups","setWordsPerPlayer","wordsOptions","formattedGroups","join","formatGroup","Number","numWords","shuffledPlayers","shuffle","j","Spectator","Pickgroups","view","TextInput","Writethings","setWords","inputs","word","newWords","handleChange","some","w","Describe","events","secondsRemaining","setSecondsRemaining","interval","setInterval","countdownEndsAt","Date","getTime","millisRemaining","Math","floor","clearInterval","timesUp","readyToStart","inProgress","rules","action","phase","endTurn","Guess","verb","Play","myGroup","isYourTurn","isYourTurnToGuess","isSpectator","border","footer","members","marginRight","Player","Group","isGroupsTurn","p","teamMembers","guessors","filter","leader","flexWrap","row","alignContent","status","activePlayer","iconWithText","animationName","shake","animationDuration","animationIterationCount","Groups","IconWithText","icon","Status","buildStatus","boxSizing","maxWidth","phaseTitle","headerContainer","headerLeft","flex","headerMiddle","zoomIn","headerRight","appContainer","RunningGameHeader","runningRoom","playerName","handleExitRoom","gameName","RunningGame","runningGame","rooms","room","gameID","app","credentials","viewBox","xmlns","fillRule","d","clipRule","seatedPlayers","seatedPlayersLabel","seatedPlayerIcon","nameChooserContainer","gameContainer","chooseName","headShake","NameChooser","onEnter","pendingPlayerName","setPlayerName","ExistingGameChooser","handleJoinRoom","handleLeaveRoom","handleStartGame","handleRequestNewGame","games","ExistingGame","playerSeat","playerIsSeated","freeSeat","freeSeats","freeSeatsAvailable","playerCanJoin","playerCanLeave","playerCanEnter","formattedGameName","NewGameCreator","createGame","onDismiss","setGame","setNumPlayers","selectedGameName","gameOptions","matchingGame","createNumPlayersRange","console","log","Lobby","errorMsg","gameComponents","handleEnterLobby","handleCreateRoom","handleExitLobby","handleRefreshRooms","showNameChooser","setShowNameChooser","showNewGameForm","setShowNewGameForm","nameChosen","LobbyRenderer","Logo","paddingBottom","Header","overflow","wrapper","importedGames","TelephoneGame","board","TelephoneBoard","SaladbowlGame","SaladbowlBoard","App","gameServer","lobbyServer","renderer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9fb5119.chunk.js","sourcesContent":["export class Entry {\n  constructor(number) {\n    this.number = number;\n    this.writing = null;\n    this.drawing = null;\n    this.author = null;\n  }\n}\n\nexport function entryFilledIn(entry) {\n  return entry.drawing != null || entry.writing != null;\n}\n\nexport function entryNotFilledIn(entry) {\n  return !entryFilledIn(entry);\n}\n","import { Entry, entryFilledIn, entryNotFilledIn } from \"./entry\";\n\nexport function paperHasCompletedEntry(paper, entryNumber) {\n  if (entryNumber < 0 || entryNumber >= paper.entries.length) {\n    return false;\n  }\n  return entryFilledIn(paper.entries[entryNumber]);\n}\n\nexport function unfilledEntry(paper) {\n  return paper.entries.find(entry => entryNotFilledIn(entry));\n}\n\nexport function latestEntry(paper) {\n  return paper.entries\n    .slice()\n    .reverse()\n    .find(entry => entryFilledIn(entry));\n}\n\nexport class Paper {\n  constructor(player, numEntries) {\n    this.player = player;\n    this.entries = Array(numEntries).fill(null);\n    for (let i = 0; i < numEntries; i++) {\n      this.entries[i] = new Entry(i);\n    }\n  }\n}\n","import { Paper, paperHasCompletedEntry } from \"./paper\";\n\n// TURN\nfunction OnBegin(G, ctx) {\n  G.currentSubmissionMethod = ctx.turn % 2 === 0 ? \"draw\" : \"write\";\n}\n\n// TURN\nfunction OnEnd(G, ctx) {\n  // Exchange Papers\n  const { numPlayers } = ctx;\n  const currentHand = G.playerIdsToPaperIdx;\n  const newHand = {};\n  Object.keys(currentHand).forEach(playerId => {\n    const previousIdx = currentHand[playerId];\n    const nextIdx = (numPlayers + previousIdx - 1) % numPlayers;\n    newHand[playerId] = nextIdx;\n  });\n  return {\n    ...G,\n    playerIdsToPaperIdx: newHand\n  };\n}\n\n// MOVE\nfunction SubmitWriting(G, ctx, writing, ...args) {\n  const { playerID, turn } = ctx;\n  const paperIndex = G.playerIdsToPaperIdx[playerID];\n  G.papers[paperIndex].entries[turn - 1] = {\n    ...G.papers[paperIndex].entries[turn - 1],\n    writing,\n    author: playerID\n  };\n}\n\n// MOVE\nfunction SubmitDrawing(G, ctx, drawing) {\n  const { playerID, turn } = ctx;\n  const paperIndex = G.playerIdsToPaperIdx[playerID];\n  G.papers[paperIndex].entries[turn - 1] = {\n    ...G.papers[paperIndex].entries[turn - 1],\n    drawing,\n    author: playerID\n  };\n}\n\nfunction isTurnFinished(G, ctx) {\n  // The turn is finished when every paper has a complete\n  // entry for the currentEntry\n  const { turn } = ctx;\n  return G.papers.every(paper => paperHasCompletedEntry(paper, turn - 1));\n}\n\nfunction isGameFinished(G) {\n  // The game is finished when there is a filled in entry for the Nth round\n  const { numberOfRounds, papers } = G;\n  const isFinished = papers.every(paper =>\n    paperHasCompletedEntry(paper, numberOfRounds - 1)\n  );\n\n  if (isFinished) {\n    return {};\n  }\n\n  // Not finished\n  return null;\n}\n\nexport const Game = {\n  name: \"paper-telephone\",\n\n  setup: ctx => {\n    const numPlayers = ctx.numPlayers;\n    const numberOfRounds = numPlayers;\n    const papers = Array(numPlayers);\n    const playerIdsToPaperIdx = {};\n    for (let i = 0; i < numPlayers; i++) {\n      papers[i] = new Paper(i, numberOfRounds);\n      playerIdsToPaperIdx[`${i}`] = i;\n    }\n\n    return {\n      papers: papers,\n      numberOfRounds: numberOfRounds,\n      currentSubmissionMethod: null,\n      playerIdsToPaperIdx: playerIdsToPaperIdx\n    };\n  },\n\n  turn: {\n    onBegin: OnBegin,\n    onEnd: OnEnd,\n    endIf: isTurnFinished,\n    activePlayers: { all: \"submit\", moveLimit: 1 },\n    stages: {\n      submit: {\n        moves: {\n          SubmitWriting,\n          SubmitDrawing\n        }\n      }\n    }\n  },\n\n  moves: {},\n\n  endIf: isGameFinished,\n\n  minPlayers: 2,\n  maxPlayers: 10\n};\n\nexport default Game;\n","export const colors = {\n  pinkVeryLight: \"#ffffff\",\n  pinkLight: \"#fae3d9\",\n  pinkDark: \"#ffb6b9\",\n  blueLight: \"#bbded6\",\n  blueDark: \"#8ac6d1\",\n  black: \"#1C2826\"\n};\n\nexport const sizes = {\n  cardWidth: \"750px\",\n  textLarge: \"18pt\"\n};\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  main: {\n    height: \"30px\",\n    borderRadius: \"10px\",\n    fontWeight: \"bold\",\n    backgroundColor: colors.blueLight,\n    borderColor: \"grey\",\n    color: \"grey\",\n    borderWidth: \"2px\",\n    outline: \"none\",\n    cursor: \"pointer\",\n    \":hover\": {\n      boxShadow: \"1px 1px #888888\",\n    },\n  },\n  primary: {\n    backgroundColor: colors.blueLight,\n  },\n  secondary: {},\n});\n\nexport default function Button({ onClick, children, type }) {\n  const isPrimary = type === \"primary\";\n  const isSecondary = type !== \"primary\";\n\n  return (\n    <button\n      className={css(\n        styles.main,\n        isPrimary && styles.primary,\n        isSecondary && styles.secondary\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport Button from \"common/button\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  canvas: {\n    display: \"none\"\n  },\n  buttonsContainer: {\n    display: \"flex\"\n  }\n});\n\nfunction Drawer(props) {\n  const { onImageSelected, previousPhrase } = props;\n\n  const videoEl = useRef(null);\n  const canvasEl = useRef(null);\n\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    if (!videoEl || imageData) {\n      return;\n    }\n    navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {\n      let video = videoEl.current;\n      video.srcObject = stream;\n      video.play();\n    });\n  }, [videoEl, imageData]);\n\n  const handleTakePicClick = () => {\n    var ctx = canvasEl.current.getContext(\"2d\");\n    ctx.drawImage(\n      videoEl.current,\n      0,\n      0,\n      canvasEl.current.width,\n      canvasEl.current.height\n    );\n    setImageData(canvasEl.current.toDataURL(\"image/jpeg\"));\n  };\n\n  const handleClick = () => {\n    if (onImageSelected) {\n      onImageSelected(imageData);\n    }\n  };\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.header)}>\n        <p>Time to draw!</p>\n      </div>\n      <div className={css(styles.promptContainer)}>\n        <p>Can you draw this phrase and take a picture of it?</p>\n        <p>{previousPhrase}</p>\n      </div>\n      <div className={css(styles.drawingContainer)}>\n        {!imageData && (\n          <>\n            <video ref={videoEl} autoPlay={true}></video>\n            <canvas\n              className={css(styles.canvas)}\n              ref={canvasEl}\n              width={640}\n              height={480}\n            ></canvas>\n          </>\n        )}\n        {imageData && <img src={imageData} alt=\"Foo\" />}\n      </div>\n      <div className={css(styles.buttonsContainer)}>\n        {!imageData && (\n          <Button type=\"primary\" onClick={handleTakePicClick}>\n            Take picture\n          </Button>\n        )}\n        {imageData && (\n          <Button type=\"primary\" onClick={handleClick}>\n            Submit\n          </Button>\n        )}\n        {imageData && (\n          <Button onClick={() => setImageData(null)}>\n            Take a different picture\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Drawer;\n","import React from \"react\";\nimport { sizes } from \"styles\";\nimport Button from \"common/button\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  input: {\n    // height: \"200px\",\n    fontSize: sizes.textLarge,\n    marginBottom: \"10px\"\n  }\n});\n\nfunction Writer(props) {\n  const { onPhraseChosen, previousDrawingUri } = props;\n\n  const [writing, setWriting] = React.useState(\"\");\n\n  const handleWritingChange = event => {\n    setWriting(event.target.value);\n  };\n\n  const handleClick = () => {\n    onPhraseChosen(writing);\n  };\n\n  const firstTime = previousDrawingUri == null;\n\n  const firstTimeTitle = \"Lets Begin!\";\n  const guessDrawingTitle = \"Guess that phrase!\";\n  const title = firstTime ? firstTimeTitle : guessDrawingTitle;\n\n  const firstTimePrompt =\n    \"Enter a phrase that the next person will have to draw out.\";\n  const guessDrawingPrompt =\n    \"Take a look at the picture that the person before you drew. What do you think the word or phrase is?\";\n  const prompt = firstTime ? firstTimePrompt : guessDrawingPrompt;\n\n  return (\n    <div className={css(styles.container)}>\n      <p>{title}</p>\n      {previousDrawingUri && (\n        <img src={previousDrawingUri} width=\"640\" height=\"480\" alt=\"Foo\" />\n      )}\n      <p>{prompt}</p>\n      <input\n        className={css(styles.input)}\n        type=\"text\"\n        placeholder=\"Enter a phrase here\"\n        value={writing}\n        onChange={handleWritingChange}\n      />\n      <Button type=\"primary\" onClick={handleClick}>\n        Submit\n      </Button>\n    </div>\n  );\n}\n\nexport default Writer;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: \"white\",\n    padding: \"25px\",\n    borderWidth: \"2px\",\n    borderRadius: \"25px\",\n    borderColor: colors.blueLight,\n    borderStyle: \"solid\",\n  },\n  header: {\n    width: \"100%\",\n    textAlign: \"center\",\n    fontFamily: [\"Fredoka One\", \"cursive\"],\n    color: colors.blueLight,\n    padding: 0,\n    margin: 0,\n  },\n});\n\nexport default function Card({ title, children }) {\n  return (\n    <div className={css(styles.card)}>\n      <div className={css(styles.header)}>\n        <span>{title}</span>\n      </div>\n      {children}\n    </div>\n  );\n}\n","export function nameFromId(playerID, gameMetadata) {\n  if (!gameMetadata || !Array.isArray(gameMetadata)) {\n    return `${playerID}`;\n  }\n  const gameMetadataEntry = gameMetadata.find(\n    (e) => `${e.id}` === `${playerID}`\n  );\n  return gameMetadataEntry.name;\n}\n\nexport function toColor(str) {\n  var hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  var colour = \"#\";\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n}\n","import React from \"react\";\nimport Card from \"common/card\";\nimport { colors } from \"styles\";\nimport { nameFromId } from \"helpers\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  text: {\n    fontFamily: [\"Fredoka One\", \"cursive\"],\n    color: colors.blueLight,\n    padding: 0,\n    margin: 0,\n  },\n});\n\nfunction WrittenEntry({ entry, first, gameMetadata }) {\n  return (\n    <div>\n      {first && <p>First {nameFromId(entry.author, gameMetadata)} wrote</p>}\n      {!first && (\n        <p>\n          Which {nameFromId(entry.author, gameMetadata)} guessed was a drawing\n          of the phrase\n        </p>\n      )}\n      <p>{entry.writing}</p>\n    </div>\n  );\n}\n\nfunction DrawnEntry({ entry, gameMetadata }) {\n  return (\n    <div>\n      <p>Which {nameFromId(entry.author, gameMetadata)} then drew as</p>\n      <img src={entry.drawing} width=\"640\" height=\"480\" alt=\"Foo\" />\n    </div>\n  );\n}\n\nfunction PaperSummary({ paper, gameMetadata }) {\n  const { entries } = paper;\n  const summaries = entries.map((entry, idx) => {\n    if (idx % 2 === 0) {\n      return (\n        <WrittenEntry\n          key={idx}\n          entry={entry}\n          first={idx === 0}\n          gameMetadata={gameMetadata}\n        />\n      );\n    } else {\n      return <DrawnEntry key={idx} entry={entry} gameMetadata={gameMetadata} />;\n    }\n  });\n  return (\n    <div>\n      <p>\n        Heres what {nameFromId(paper.player, gameMetadata)}'s paper looked like\n      </p>\n      {summaries}\n    </div>\n  );\n}\n\nexport default function Summary({ game, gameMetadata }) {\n  const [currentPaperIdx, setCurrentPaperIdx] = React.useState(0);\n  const paper = game.papers[currentPaperIdx];\n  const handleNextClick = () => {\n    setCurrentPaperIdx((currentPaperIdx + 1) % game.papers.length);\n  };\n  const handleBackClick = () => {\n    setCurrentPaperIdx(\n      (game.papers.length + currentPaperIdx - 1) % game.papers.length\n    );\n  };\n  return (\n    <div>\n      <Card>\n        <p>Its the end of the game!</p>\n        <p>Lets take a look at what everybody wrote and drew</p>\n        <p>\n          You're currently looking at {nameFromId(paper.player, gameMetadata)}'s\n          paper\n        </p>\n        <button onClick={handleBackClick}>Back</button>\n        <button onClick={handleNextClick}>Next Thread</button>\n      </Card>\n      <Card>\n        <PaperSummary paper={paper} gameMetadata={gameMetadata} />\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Drawer from \"./draw\";\nimport Writer from \"./write\";\nimport Card from \"common/card\";\nimport Summary from \"components/telephone/summary\";\nimport { latestEntry } from \"../../model/telephone/paper\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors } from \"../../styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    minHeight: \"100%\",\n    position: \"absolute\",\n    backgroundColor: colors.blueLight,\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"15px\",\n  },\n  innerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  main: {\n    flexGrow: 1,\n  },\n  cardContainer: {\n    marginTop: \"35px\",\n  },\n});\n\nexport function Board(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const handleSubmitWriting = (writing) => {\n    moves.SubmitWriting(writing);\n  };\n\n  const handleSubmitDrawing = (drawingUri) => {\n    moves.SubmitDrawing(drawingUri);\n  };\n\n  if (ctx.gameover) {\n    return (\n      <div className={css(styles.container)}>\n        <div className={css(styles.innerContainer)}>\n          <div className={css(styles.cardContainer)}>\n            <Summary game={G} gameMetadata={gameMetadata} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!playerID) {\n    return (\n      <div className={css(styles.container)}>\n        <div className={css(styles.innerContainer)}>\n          <div className={css(styles.cardContainer)}>\n            <Card>\n              <h1>Unknown Player</h1>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const currentPageIdx = G.playerIdsToPaperIdx[playerID];\n  const currentPage = G.papers[currentPageIdx];\n  const latestEnt = latestEntry(currentPage);\n\n  let latestDrawingUri = null;\n  let latestWriting = null;\n\n  if (latestEnt && G.currentSubmissionMethod === \"write\") {\n    latestDrawingUri = latestEnt.drawing;\n  }\n\n  if (latestEnt && G.currentSubmissionMethod === \"draw\") {\n    latestWriting = latestEnt.writing;\n  }\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.innerContainer)}>\n        <div className={css(styles.cardContainer)}>\n          <Card>\n            <div className={css(styles.details)}>\n              <p>\n                The current turn is: {ctx.turn}, which means its time to:{\" \"}\n                {G.currentSubmissionMethod}\n              </p>\n              <p>\n                There are {ctx.numPlayers} players. You are player {playerID}\n              </p>\n            </div>\n          </Card>\n        </div>\n        <div className={css(styles.cardContainer)}>\n          <Card>\n            <div className={css(styles.main)}>\n              {G.currentSubmissionMethod === \"write\" &&\n                ctx.activePlayers[playerID] && (\n                  <Writer\n                    onPhraseChosen={handleSubmitWriting}\n                    previousDrawingUri={latestDrawingUri}\n                  />\n                )}\n              {G.currentSubmissionMethod === \"draw\" &&\n                ctx.activePlayers[playerID] && (\n                  <Drawer\n                    onImageSelected={handleSubmitDrawing}\n                    previousPhrase={latestWriting}\n                  />\n                )}\n              {!ctx.activePlayers[playerID] && (\n                <p>Waiting for others to finish their move</p>\n              )}\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","const PhaseTurn = {\n  onBegin: (G, ctx) => {\n    // Shuffle the words\n    G.wordsInBowl = ctx.random.Shuffle(G.wordsInBowl);\n    // Make sure the clock is reset\n    G.countdownStartedAt = null;\n  },\n  onEnd: (G, ctx) => {\n    // Return word in hand to bowl\n    if (G.currentWord) {\n      G.wordsInBowl.push(G.currentWord);\n      G.currentWord = null;\n    }\n    // Next time its this groups turn, itll be the next person in the group\n    G.groups[G.groupOrderPos].playOrderPos =\n      (G.groups[G.groupOrderPos].playOrderPos + 1) %\n      G.groups[G.groupOrderPos].players.length;\n\n    // Play passes to the next group\n    G.groupOrderPos = (G.groupOrderPos + 1) % G.groups.length;\n  },\n  endIf: (G, ctx) => {\n    // Turn is automatically over once all the words are gone\n    return G.wordsInBowl.length === 0 && G.currentWord == null;\n  },\n  order: {\n    first: (G) => {\n      const currentGroup = G.groups[G.groupOrderPos];\n      const currentPersonInGroup =\n        currentGroup.players[currentGroup.playOrderPos];\n      debugger;\n      return currentPersonInGroup;\n    },\n    next: (G) => {\n      const currentGroup = G.groups[G.groupOrderPos];\n      const currentPersonInGroup =\n        currentGroup.players[currentGroup.playOrderPos];\n      return currentPersonInGroup;\n    },\n  },\n};\n\nconst PhaseMoves = {\n  StartTheClock: (G, _ctx, currentTime) => {\n    if (G.countdownStartedAt != null) {\n      // Clock is already started\n      return;\n    }\n    // Draw a word\n    const words = G.wordsInBowl;\n    G.currentWord = words.pop();\n    G.wordsInBowl = words;\n    // Start the Clock\n    G.countdownStartedAt = currentTime;\n  },\n  ScoreWord: (G, ctx) => {\n    if (!G.currentWord) {\n      return;\n    }\n    // Get group for current player\n    const currentPlayer = ctx.currentPlayer;\n    const currentGroup = G.groups.find((group) =>\n      group.players.includes(currentPlayer)\n    );\n    // Add to score\n    currentGroup.score = currentGroup.score += 1;\n    // Add word to collectedWords\n    const currentWord = G.currentWord;\n    G.wordsCollected.push(currentWord);\n    G.currentWord = null;\n    if (G.wordsInBowl === []) {\n      // Stop the clock\n      G.countdownStartedAt = null;\n    } else {\n      // Draw a word\n      const words = G.wordsInBowl;\n      G.currentWord = words.pop();\n      G.wordsInBowl = words;\n    }\n  },\n};\n\nconst PhaseEndIf = (G, ctx) => {\n  // Phase is over automatically once all the words are gone\n  return G.wordsInBowl.length === 0 && G.currentWord == null;\n};\n\nconst PhaseOnEnd = (G, _ctx) => {\n  // Return all the words to the bowl\n  const wordsToReturn = G.wordsCollected;\n  G.wordsInBowl = wordsToReturn;\n  G.wordsCollected = [];\n  // Make sure the clock is reset\n  G.countdownStartedAt = null;\n};\n\nexport const Game = {\n  name: \"saladbowl\",\n  minPlayers: 4,\n  maxPlayers: 20,\n\n  setup: (ctx) => {\n    return {\n      countdownSeconds: null,\n      groups: [\n        // {\n        //   score: 0,\n        //   players: [],\n        //   playOrderPos: 0,\n        //   name: 0\n        // }\n      ],\n      wordsInBowl: [],\n      currentWord: null,\n      wordsCollected: [],\n      countdownStartedAt: null,\n      wordsWrittenPerPlayer: 1,\n      groupOrderPos: 0,\n    };\n  },\n\n  phases: {\n    PickGroups: {\n      start: true, // The first phase\n      moves: {\n        ChooseGroups: (G, _ctx, groups, wordsPerPlayer) => {\n          G.groups = groups.map((group, idx) => {\n            return {\n              score: 0,\n              players: group,\n              playOrderPos: 0,\n              name: `${idx + 1}`,\n            };\n          });\n          G.wordsWrittenPerPlayer = wordsPerPlayer || 5;\n        },\n      },\n      endIf: (G, ctx) => {\n        // Everyone is in a group\n        return G.groups.map((g) => g.players).flat().length === ctx.numPlayers;\n      },\n      next: \"BuildBowl\",\n    },\n    BuildBowl: {\n      turn: {\n        activePlayers: {\n          all: \"WriteThings\",\n          moveLimit: 1,\n        },\n        stages: {\n          WriteThings: {\n            moves: {\n              AddWords: (G, ctx, words) => {\n                G.wordsInBowl = [...G.wordsInBowl, ...words];\n              },\n            },\n          },\n        },\n      },\n      endIf: (G, ctx) => {\n        // Phase is done if there are enough words in the bowl\n        return (\n          G.wordsInBowl.length === ctx.numPlayers * G.wordsWrittenPerPlayer\n        );\n      },\n      next: \"DescribeThings\",\n    },\n    DescribeThings: {\n      onBegin: (G) => {\n        G.countdownSeconds = 30;\n      },\n      endIf: PhaseEndIf,\n      onEnd: PhaseOnEnd,\n      next: \"DescribeThingsOneWord\",\n      turn: {\n        ...PhaseTurn,\n      },\n      moves: {\n        ...PhaseMoves,\n      },\n    },\n    DescribeThingsOneWord: {\n      onBegin: (G) => {\n        G.countdownSeconds = 30;\n      },\n      endIf: PhaseEndIf,\n      onEnd: PhaseOnEnd,\n      next: \"ActItOut\",\n      turn: {\n        ...PhaseTurn,\n      },\n      moves: {\n        ...PhaseMoves,\n      },\n    },\n    ActItOut: {\n      onBegin: (G) => {\n        G.countdownSeconds = 45;\n      },\n      endIf: PhaseEndIf,\n      onEnd: PhaseOnEnd,\n      turn: {\n        ...PhaseTurn,\n      },\n      moves: {\n        ...PhaseMoves,\n      },\n    },\n  },\n\n  endIf: (G, ctx) => {\n    const accumulatedPoints = G.groups\n      .map((g) => g.score)\n      .reduce((a, b) => a + b, 0);\n    const numRounds = 3;\n    const maxPoints = numRounds * G.wordsWrittenPerPlayer * ctx.numPlayers;\n    if (accumulatedPoints < maxPoints) {\n      return null;\n    } else {\n      return true;\n    }\n  },\n};\n\nexport default Game;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 0,\n  },\n});\n\nexport default function Text({ color, children }) {\n  const style = color ? { color: `${color}` } : null;\n  return (\n    <span className={css(styles.container)} style={style}>\n      {children}\n    </span>\n  );\n}\n","import React from \"react\";\nimport shuffle from \"lodash/shuffle\";\nimport Button from \"common/button\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { nameFromId } from \"helpers\";\nimport { colors, sizes } from \"styles\";\nimport Text from \"common/text\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  teamSizeContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n});\n\nexport function Picker(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const numPlayers = ctx.numPlayers;\n  const players = ctx.playOrder;\n  const [numGroups, setNumGroups] = React.useState(2);\n  const [groups, setGroups] = React.useState([]);\n  const [wordsPerPlayer, setWordsPerPlayer] = React.useState(5);\n  const handleShuffleClick = () => {\n    let groups = Array(numGroups);\n    let shuffledPlayers = shuffle(players);\n    let i = 0;\n    let j = 0;\n    while (i < shuffledPlayers.length) {\n      if (groups[j] == null) {\n        groups[j] = [];\n      }\n      groups[j].push(shuffledPlayers[i]);\n      j = (j + 1) % groups.length;\n      i++;\n    }\n    setGroups(groups);\n  };\n\n  const wordsOptions = [];\n  for (let i = 1; i <= 15; i++) {\n    wordsOptions.push(\n      <option id={i} value={i}>\n        {i}\n      </option>\n    );\n  }\n\n  const handleSelectWords = (event) => {\n    const numWords = Number(event.target.value);\n    if (numPlayers < numGroups) {\n      return;\n    }\n    setWordsPerPlayer(numWords);\n  };\n\n  const handleClick = () => {\n    moves.ChooseGroups(groups, wordsPerPlayer);\n  };\n\n  const formatGroup = (group) => {\n    const players = group.map((player) => nameFromId(player, gameMetadata));\n    return `(${players.join(\",\")})`;\n  };\n\n  const formattedGroups = groups.map((g) => formatGroup(g));\n\n  const handleSelectGroupSize = (event) => {\n    const numGroups = Number(event.target.value);\n    if (numPlayers < numGroups) {\n      return;\n    }\n    setNumGroups(numGroups);\n    setGroups([]);\n  };\n\n  return (\n    <div className={css(styles.container)}>\n      <Text>Ok! It's your job to set up the game</Text>\n      <div className={css(styles.teamSizeContainer)}>\n        <Text>How many teams?</Text>\n        <select value={numGroups} onChange={handleSelectGroupSize}>\n          <option value={2}>2</option>\n          <option value={3}>3</option>\n          <option value={4}>4</option>\n          <option value={5}>5</option>\n        </select>\n      </div>\n      <div className={css(styles.teamSizeContainer)}>\n        <Text>How many words per person?</Text>\n        <select value={wordsPerPlayer} onChange={handleSelectWords}>\n          {wordsOptions}\n        </select>\n      </div>\n      <Button onClick={handleShuffleClick}>\n        Randomize the {numGroups} groups!\n      </Button>\n      {groups.length > 0 && (\n        <>\n          <p>The proposed groups are {formattedGroups.join(\",\")}</p>\n          <Button onClick={handleClick}>Choose these groups</Button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Picker;\n","import React from \"react\";\n\nexport function Spectator(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  return (\n    <div>\n      <p>Nothing for you to do, so sit back and relax!</p>\n    </div>\n  );\n}\n\nexport default Spectator;\n","import React from \"react\";\nimport Picker from \"./pickgroups/picker\";\nimport Spectator from \"./pickgroups/spectator\";\n\nexport function Pickgroups(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const isPicker = playerID === ctx.currentPlayer;\n\n  const view = isPicker ? <Picker {...props} /> : <Spectator {...props} />;\n\n  return <div>{view}</div>;\n}\n\nexport default Pickgroups;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  input: {\n    fontSize: sizes.textLarge,\n    marginBottom: \"5px\",\n    borderRadius: \"10px\",\n    borderColor: colors.blueLight,\n    borderWidth: \"2px\",\n  },\n});\n\nexport default function TextInput({ placeholder, value, onChange }) {\n  const handleChange = (event) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <input\n      className={css(styles.input)}\n      type=\"text\"\n      placeholder={placeholder}\n      value={value}\n      onChange={handleChange}\n    />\n  );\n}\n","import React from \"react\";\nimport TextInput from \"common/textinput\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\nimport Button from \"common/button\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n});\n\nexport function Writethings(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const numWords = G.wordsWrittenPerPlayer;\n  const [words, setWords] = React.useState(Array(numWords).fill(null));\n\n  const handleChange = (value, i) => {\n    const newWords = [...words];\n    newWords[i] = value;\n    setWords(newWords);\n  };\n\n  const inputs = words.map((word, i) => {\n    return (\n      <TextInput\n        key={i}\n        value={word || \"\"}\n        onChange={(word) => handleChange(word, i)}\n      />\n    );\n  });\n\n  const handleClick = () => {\n    if (words.some((w) => w == null || w.length === 0)) {\n      return;\n    }\n    moves.AddWords(words);\n  };\n\n  const hasFinishedTurn = ctx.activePlayers[playerID] == null;\n\n  if (hasFinishedTurn) {\n    return <p>You're all done. Waiting for the others!</p>;\n  }\n\n  return (\n    <div className={css(styles.container)}>\n      <p>Choose {numWords} words to go in the bowl</p>\n      <p>\n        Decide on the video call if there should be a theme to the words (e.g.\n        same letter)\n      </p>\n      {inputs}\n      <Button onClick={handleClick}>Add Words To Bowl</Button>\n    </div>\n  );\n}\n\nexport default Writethings;\n","import React from \"react\";\nimport Writethings from \"components/saladbowl/phases/buildbowl/writethings\";\n\nexport function BuildBowl(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  return (\n    <div>\n      <Writethings {...props} />\n    </div>\n  );\n}\n\nexport default BuildBowl;\n","import React from \"react\";\nimport Button from \"common/button\";\n\nexport function Describe(props) {\n  const { moves, events, G, ctx, playerID, gameMetadata } = props;\n\n  const handleClockClick = () => {\n    moves.StartTheClock(new Date().getTime());\n  };\n\n  const [secondsRemaining, setSecondsRemaining] = React.useState(null);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      if (G.countdownStartedAt) {\n        const countdownEndsAt =\n          G.countdownStartedAt + G.countdownSeconds * 1000;\n        const currentTime = new Date().getTime();\n        if (currentTime >= countdownEndsAt) {\n          setSecondsRemaining(0);\n        } else {\n          const millisRemaining = countdownEndsAt - currentTime;\n          setSecondsRemaining(Math.floor(millisRemaining / 1000));\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [G.countdownStartedAt, G.countdownSeconds]);\n\n  const handleScore = () => {\n    moves.ScoreWord();\n  };\n\n  const endTurn = () => {\n    events.endTurn();\n  };\n\n  const timesUp = secondsRemaining === 0;\n  const readyToStart = !G.countdownStartedAt;\n  const inProgress = G.countdownStartedAt && !timesUp;\n\n  let rules = \"\";\n  let action = \"\";\n  if (ctx.phase === \"DescribeThings\") {\n    rules =\n      \"Its your turn to describe words to the rest of your group! There's no skipping, and make sure you don't say the word itself!\";\n    action = \"Describe\";\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    rules =\n      \"Its your turn! This time you can only say one word to describe it, choose wisely!\";\n    action = \"Descibe using one word:\";\n  } else if (ctx.phase === \"ActItOut\") {\n    rules =\n      \"Act out the word on the paper. Noises are allowed. You get a bit longer on the clock, make sure your team is watching you on the video!\";\n    action = \"Act out:\";\n  }\n\n  return (\n    <div>\n      <p>{rules}</p>\n      {readyToStart && (\n        <Button onClick={handleClockClick}>Start the Clock</Button>\n      )}\n      {inProgress && (\n        <>\n          <p>\n            {action}: {G.currentWord}\n          </p>\n          <Button onClick={handleScore}>Score!</Button>\n        </>\n      )}\n      {timesUp && (\n        <>\n          <p>Times up!</p>\n          <Button onClick={endTurn}>End Turn</Button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Describe;\n","import React from \"react\";\nimport { nameFromId } from \"helpers\";\n\nexport function Guess(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  let verb = \"doing\";\n  if (ctx.phase === \"DescribeThings\") {\n    verb = \"describing\";\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    verb = \"describing\";\n  } else if (ctx.phase === \"ActItOut\") {\n    verb = \"acting\";\n  }\n\n  return (\n    <div>\n      <p>\n        Its your turn to guess what{\" \"}\n        {nameFromId(ctx.currentPlayer, gameMetadata)} is {verb}!\n      </p>\n    </div>\n  );\n}\n\nexport default Guess;\n","import React from \"react\";\nimport Describe from \"./play/describe\";\nimport Guess from \"./play/guess\";\n\nexport function Play(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const myGroup = G.groups.find((g) => g.players.includes(playerID));\n  const isYourTurn = playerID === ctx.currentPlayer;\n  const isYourTurnToGuess =\n    !isYourTurn && myGroup.players.includes(ctx.currentPlayer);\n  const isSpectator = !isYourTurn && !isYourTurnToGuess;\n\n  return (\n    <div>\n      {isYourTurn && <Describe {...props} />}\n      {isYourTurnToGuess && <Guess {...props} />}\n      {isSpectator && <p>Relax! Is not your group's turn.</p>}\n    </div>\n  );\n}\n\nexport default Play;\n","import React from \"react\";\nimport { nameFromId, toColor } from \"helpers\";\nimport { colors } from \"styles\";\nimport Text from \"common/text\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: colors.pinkVeryLight,\n    padding: \"3px\",\n    borderRadius: \"10px\",\n    border: \"2px solid\",\n    borderColor: colors.blueLight,\n  },\n  header: {\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  footer: {\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  members: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  player: {\n    marginRight: \"5px\",\n  },\n});\n\nfunction Player({ player, gameMetadata }) {\n  const name = nameFromId(player, gameMetadata);\n  const color = toColor(name);\n  return (\n    <div className={css(styles.player)}>\n      <Text color={color}>{name}</Text>\n    </div>\n  );\n}\n\nfunction Group({ group, G, ctx, gameMetadata }) {\n  const currentPlayer = !ctx.activePlayers && ctx.currentPlayer;\n\n  const isGroupsTurn = group.players.find((p) => p === currentPlayer);\n\n  const teamMembers = group.players.map((p, idx) => (\n    <Player key={idx} player={p} gameMetadata={gameMetadata} />\n  ));\n\n  const turn = <Player player={currentPlayer} gameMetadata={gameMetadata} />;\n  const guessors = group.players\n    .filter((p) => p !== currentPlayer)\n    .map((p, idx) => (\n      <Player key={idx} player={p} gameMetadata={gameMetadata} />\n    ));\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.members)}>\n        {isGroupsTurn && (\n          <>\n            {turn}\n            <span>➡</span>\n            {guessors}\n          </>\n        )}\n        {!isGroupsTurn && teamMembers}\n      </div>\n      <div className={css(styles.footer)}>\n        <Text>Score: {group.score}</Text>\n      </div>\n    </div>\n  );\n}\n\nexport default Group;\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\nimport { nameFromId } from \"helpers\";\nimport Group from \"./group\";\nimport { shake } from \"react-animations\";\n\nconst styles = StyleSheet.create({\n  leader: {\n    marginRight: \"3px\",\n    display: \"flex\",\n  },\n  players: {\n    display: \"flex\",\n  },\n  groups: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    marginRight: \"10px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n  },\n  row: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignContent: \"baseline\",\n  },\n  status: {\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  activePlayer: {\n    borderRadius: \"3px\",\n    border: \"2px solid\",\n    borderColor: colors.blueLight,\n  },\n  iconWithText: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    alignItems: \"center\",\n  },\n  timesUp: {\n    animationName: shake,\n    animationDuration: \"1s\",\n    animationIterationCount: 3,\n  },\n});\n\nfunction Groups(props) {\n  const { moves, events, G, ctx, playerID, gameMetadata } = props;\n\n  const groups = G.groups.map((group) => (\n    <div className={css(styles.group)}>\n      <Group group={group} G={G} ctx={ctx} gameMetadata={gameMetadata} />\n    </div>\n  ));\n\n  return (\n    <div className={css(styles.groups)}>{groups.length > 0 && groups}</div>\n  );\n}\n\nfunction IconWithText({ icon, text }) {\n  return (\n    <div className={css(styles.iconWithText)}>\n      <span>{icon}</span>:<span>{text}</span>\n    </div>\n  );\n}\n\nfunction buildStatus(G, ctx, gameMetadata) {\n  let status = \"Unknown\";\n  let currentPlayer = ctx.currentPlayer;\n\n  if (ctx.gameover) {\n    status = \"Its game over! Thanks for playing!\";\n  } else if (ctx.phase === \"PickGroups\") {\n    status = `${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )} is sorting out the groups`;\n  } else if (ctx.phase === \"BuildBowl\") {\n    status = \"Time for everyone fill up the bowl with words\";\n  } else if (ctx.phase === \"DescribeThings\") {\n    status = `Time for player ${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )} to describe words to the rest of their group`;\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    status = `Time for ${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )} to describe words using just one word to the rest of their group`;\n  } else if (ctx.phase === \"ActItOut\") {\n    status = `Time for ${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )} to act out a word to the rest of their group`;\n  }\n\n  return status;\n}\n\nexport function Status(props) {\n  const { moves, events, G, ctx, playerID, gameMetadata } = props;\n\n  const [secondsRemaining, setSecondsRemaining] = React.useState(null);\n\n  const status = buildStatus(G, ctx, gameMetadata);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      if (G.countdownStartedAt) {\n        const countdownEndsAt =\n          G.countdownStartedAt + G.countdownSeconds * 1000;\n        const currentTime = new Date().getTime();\n        if (currentTime >= countdownEndsAt) {\n          setSecondsRemaining(0);\n        } else {\n          const millisRemaining = countdownEndsAt - currentTime;\n          setSecondsRemaining(Math.floor(millisRemaining / 1000));\n        }\n      } else {\n        setSecondsRemaining(null);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [G.countdownStartedAt, G.countdownSeconds]);\n\n  let wordsInBowl = G.wordsInBowl.length;\n  if (G.currentWord) {\n    wordsInBowl += 1;\n  }\n\n  const timesUp = secondsRemaining === 0;\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.row)}>\n        <IconWithText icon=\"🥣\" text={wordsInBowl} />\n        <div className={css(timesUp && styles.timesUp)}>\n          <IconWithText icon=\"⏲\" text={secondsRemaining || \"N/A\"} />\n        </div>\n      </div>\n      <Groups {...props} />\n      <div className={css(styles.status)}>{status}</div>\n    </div>\n  );\n}\n\nexport default Status;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    padding: \"3px\",\n  },\n  game: {\n    maxWidth: sizes.cardWidth,\n    width: \"100%\",\n  },\n});\n\nexport default function Game({ children }) {\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.game)}>{children}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Pickgroups from \"./phases/pickgroups\";\nimport BuildBowl from \"./phases/buildbowl\";\nimport Play from \"./phases/play\";\nimport Status from \"./status\";\nimport Game from \"common/game\";\nimport Card from \"common/card\";\n\nexport function Board(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  let phase = null;\n  let phaseTitle = null;\n  if (ctx.phase === \"PickGroups\") {\n    phase = <Pickgroups {...props} />;\n    phaseTitle = \"Pick Groups\";\n  } else if (ctx.phase === \"BuildBowl\") {\n    phase = <BuildBowl {...props} />;\n    phaseTitle = \"Fill The Bowl\";\n  } else if (ctx.phase === \"DescribeThings\") {\n    phase = <Play {...props} />;\n    phaseTitle = \"Describe The Word\";\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    phase = <Play {...props} />;\n    phaseTitle = \"Describe The Word using Just One Word!\";\n  } else if (ctx.phase === \"ActItOut\") {\n    phase = <Play {...props} />;\n    phaseTitle = \"Act It Out\";\n  }\n\n  return (\n    <Game>\n      <Card>\n        <Status {...props} />\n      </Card>\n      {phase && <Card title={phaseTitle}>{phase}</Card>}\n    </Game>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { zoomIn } from \"react-animations\";\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n    minHeight: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  headerContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    backgroundColor: colors.pinkVeryLight,\n    width: \"100%\",\n    padding: \"3px\",\n    boxSizing: \"border-box\",\n  },\n  headerLeft: {\n    flex: 1,\n    textAlign: \"left\",\n  },\n  headerMiddle: {\n    flex: 1,\n    textAlign: \"center\",\n    animationName: zoomIn,\n    animationDuration: \"1s\",\n  },\n  headerRight: {\n    flex: 1,\n    textAlign: \"right\",\n  },\n  appContainer: {\n    flexGrow: 1,\n    position: \"relative\",\n  },\n});\n\nfunction RunningGameHeader({ runningRoom, playerName, handleExitRoom }) {\n  if (!runningRoom) {\n    return <p>Please wait</p>;\n  }\n  const gameName =\n    runningRoom.gameName === \"paper-telephone\"\n      ? \"Paper Telephone\"\n      : runningRoom.gameName;\n  const exitGame = () => {\n    handleExitRoom();\n  };\n  return (\n    <div className={css(styles.headerContainer)}>\n      <div className={css(styles.headerLeft)}>\n        <button onClick={exitGame}>Back to Lobby</button>\n      </div>\n      <div className={css(styles.headerMiddle)}>Now playing: {gameName}</div>\n      <div className={css(styles.headerRight)}>Playing as: {playerName}</div>\n    </div>\n  );\n}\n\nexport default function RunningGame(props) {\n  const { runningGame, rooms, playerName, handleExitRoom } = props;\n  const runningRoom = rooms.find((room) => room.gameID === runningGame.gameID);\n  return (\n    <div className={css(styles.container)}>\n      <RunningGameHeader\n        runningGame={runningGame}\n        runningRoom={runningRoom}\n        playerName={playerName}\n        handleExitRoom={handleExitRoom}\n      />\n      <div className={css(styles.appContainer)}>\n        <runningGame.app\n          gameID={runningGame.gameID}\n          playerID={runningGame.playerID}\n          credentials={runningGame.credentials}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { toColor } from \"helpers\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    textAlign: \"center\",\n  },\n  icon: {},\n  text: {\n    padding: 0,\n    margin: 0,\n  },\n});\n\nexport default function Player({ name }) {\n  const color = toColor(name);\n  return (\n    <div className={css(styles.container)}>\n      <svg\n        className={css(styles.icon)}\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 16 16\"\n        fill={color}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 100-6 3 3 0 000 6z\"\n          clipRule=\"evenodd\"\n        />\n      </svg>\n      <p className={css(styles.text)} style={{ color: `${color}` }}>\n        {name}\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport Card from \"common/card\";\nimport Player from \"components/player\";\nimport Game from \"common/game\";\nimport Button from \"common/button\";\nimport TextInput from \"common/textinput\";\nimport { headShake } from \"react-animations\";\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n  },\n  seatedPlayers: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  seatedPlayersLabel: {\n    marginRight: \"10px\",\n  },\n  seatedPlayerIcon: {\n    marginRight: \"10px\",\n  },\n  nameChooserContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  game: {\n    borderRadius: \"10px\",\n    borderStyle: \"solid\",\n    borderColor: colors.blueLight,\n    borderWidth: \"2px\",\n    padding: \"10px\",\n  },\n  gameContainer: {\n    marginBottom: \"10px\",\n  },\n  chooseName: {\n    animationName: headShake,\n    animationDuration: \"1s\",\n    animationIterationCount: 2,\n  },\n});\n\nfunction NameChooser({ onEnter }) {\n  const [pendingPlayerName, setPlayerName] = React.useState(\"\");\n\n  const onClickEnter = () => {\n    if (pendingPlayerName === \"\") return;\n    setPlayerName(\"\");\n    onEnter(pendingPlayerName);\n  };\n\n  return (\n    <div className={css(styles.nameChooserContainer)}>\n      <TextInput\n        placeholder=\"Choose a name\"\n        value={pendingPlayerName}\n        onChange={setPlayerName}\n      />\n      <Button className=\"buttons\" onClick={onClickEnter}>\n        Enter\n      </Button>\n    </div>\n  );\n}\n\nfunction ExistingGameChooser({\n  rooms,\n  playerName,\n  handleJoinRoom,\n  handleLeaveRoom,\n  handleStartGame,\n  handleRequestNewGame,\n}) {\n  const games = rooms.map((room) => (\n    <div key={room.gameID} className={css(styles.gameContainer)}>\n      <ExistingGame\n        room={room}\n        playerName={playerName}\n        handleJoinRoom={handleJoinRoom}\n        handleLeaveRoom={handleLeaveRoom}\n        handleStartGame={handleStartGame}\n      />\n    </div>\n  ));\n  return (\n    <div>\n      <p>Choose from {rooms.length} existing games</p>\n      {games}\n      <p>\n        Or... <Button onClick={handleRequestNewGame}>Host a new game</Button>\n      </p>\n    </div>\n  );\n}\n\nfunction ExistingGame({\n  room,\n  playerName,\n  handleJoinRoom,\n  handleLeaveRoom,\n  handleStartGame,\n}) {\n  const { gameID, gameName, players } = room;\n  const playerNames = players.map((p) => p.name).join(\",\");\n  const playerSeat = players.find((p) => p.name === playerName);\n  const playerIsSeated = playerSeat != null;\n  const freeSeat = players.find((p) => !p.name);\n  const freeSeats = players.filter((p) => !p.name);\n  const freeSeatsAvailable = freeSeat != null;\n  const gameIsFullySeated = !freeSeatsAvailable;\n  const playerHasName = playerName !== \"Visitor\";\n  const playerCanJoin = playerHasName && !playerIsSeated && freeSeatsAvailable;\n  const playerCanLeave = playerIsSeated;\n  const playerCanEnter = playerIsSeated && gameIsFullySeated;\n\n  const startGame = () => {\n    handleStartGame(gameName, {\n      gameID: gameID,\n      playerID: \"\" + playerSeat.id,\n      numPlayers: players.length,\n    });\n  };\n\n  const joinGame = () => {\n    handleJoinRoom(gameName, gameID, \"\" + freeSeat.id);\n  };\n\n  const leaveGame = () => {\n    handleLeaveRoom(gameName, gameID);\n  };\n\n  const seatedPlayers = players\n    .map((p) => p.name)\n    .filter((name) => name != null)\n    .map((name) => (\n      <div id={name} className={css(styles.seatedPlayerIcon)}>\n        <Player name={name} key={name} />\n      </div>\n    ));\n\n  const formattedGameName =\n    gameName === \"paper-telephone\" ? \"Telephone\" : gameName;\n\n  return (\n    <div className={css(styles.game)}>\n      <p>{formattedGameName}</p>\n      <div className={css(styles.seatedPlayers)}>\n        <p className={css(styles.seatedPlayersLabel)}>Players:</p>\n        {seatedPlayers}\n      </div>\n      {freeSeatsAvailable && (\n        <p>Waiting for {freeSeats.length} more players to take a seat</p>\n      )}\n      {playerCanJoin && <Button onClick={joinGame}>Take a Seat</Button>}\n      {playerCanEnter && (\n        <div>\n          <p>Everyone is sat down!</p>\n          <Button onClick={startGame}>Enter the game</Button>\n        </div>\n      )}\n      {playerCanLeave && <Button onClick={leaveGame}>Leave</Button>}\n    </div>\n  );\n}\n\nfunction NewGameCreator({ games, createGame, onDismiss }) {\n  const [game, setGame] = React.useState(games[0]);\n  const [numPlayers, setNumPlayers] = React.useState(games[0].game.minPlayers);\n\n  const selectedGameName = game ? game.game.name : \"--\";\n\n  const gameOptions = games.map((g) => (\n    <option key={g.game.name} value={g.game.name}>\n      {g.game.name}\n    </option>\n  ));\n\n  const onClick = () => {\n    console.log(selectedGameName);\n    createGame(selectedGameName, numPlayers);\n    onDismiss();\n  };\n\n  const onGameSelected = (event) => {\n    const name = event.target.value;\n    if (name === \"\") {\n      setGame(null);\n      return;\n    }\n    const matchingGame = games.find((g) => g.game.name === name);\n    setGame(matchingGame);\n    if (numPlayers < matchingGame.game.minPlayers) {\n      setNumPlayers(matchingGame.game.minPlayers);\n    }\n    if (numPlayers > matchingGame.game.maxPlayers) {\n      setNumPlayers(matchingGame.game.minPlayers);\n    }\n  };\n\n  const onNumPlayersSelected = (event) => {\n    const numPlayers = event.target.value;\n    setNumPlayers(numPlayers);\n  };\n\n  const createNumPlayersOption = (idx) => {\n    return (\n      <option key={\"num-option-\" + idx} value={idx}>\n        {idx}\n      </option>\n    );\n  };\n\n  const createNumPlayersRange = (game) => {\n    return [...new Array(game.game.maxPlayers + 1).keys()].slice(\n      game.game.minPlayers\n    );\n  };\n\n  return (\n    <div>\n      <p>Which game do you want to play?</p>\n      <select value={selectedGameName} onChange={onGameSelected}>\n        {gameOptions}\n      </select>\n      <p>And how many players?</p>\n      <select value={numPlayers} onChange={onNumPlayersSelected}>\n        {createNumPlayersRange(game).map(createNumPlayersOption)}\n      </select>\n      <Button onClick={onClick}>Create</Button>\n    </div>\n  );\n}\n\nexport default function Lobby(props) {\n  const {\n    errorMsg,\n    gameComponents,\n    rooms,\n    phase,\n    playerName,\n    runningGame,\n    handleEnterLobby,\n    handleExitLobby,\n    handleCreateRoom,\n    handleJoinRoom,\n    handleLeaveRoom,\n    handleExitRoom,\n    handleRefreshRooms,\n    handleStartGame,\n  } = props;\n\n  const [showNameChooser, setShowNameChooser] = React.useState(\n    playerName == null\n  );\n\n  const [showNewGameForm, setShowNewGameForm] = React.useState(null);\n\n  const handleNameChosen = (name) => {\n    setShowNameChooser(false);\n    handleEnterLobby(name);\n  };\n\n  const nameChosen = playerName !== \"Visitor\";\n\n  return (\n    <div className={css(styles.container)}>\n      <Game>\n        <Card title=\"Welcome\">\n          <p>Hi {playerName || \"\"}, Welcome to the Paper Gamer Lobby!</p>\n          {!showNameChooser && nameChosen && (\n            <Button onClick={() => setShowNameChooser(true)}>\n              Change Name\n            </Button>\n          )}\n          {!showNameChooser && !nameChosen && (\n            <div className={css(styles.chooseName)}>\n              <Button onClick={() => setShowNameChooser(true)}>\n                Choose Name\n              </Button>\n            </div>\n          )}\n          {showNameChooser && <NameChooser onEnter={handleNameChosen} />}\n        </Card>\n        {rooms.length > 0 && (\n          <Card title=\"Join a Game\">\n            <ExistingGameChooser\n              rooms={rooms}\n              playerName={playerName}\n              handleJoinRoom={handleJoinRoom}\n              handleLeaveRoom={handleLeaveRoom}\n              handleStartGame={handleStartGame}\n              handleRequestNewGame={() => setShowNewGameForm(true)}\n            />\n          </Card>\n        )}\n        {(showNewGameForm || rooms.length === 0) && (\n          <Card title=\"Create a new Game\">\n            <NewGameCreator\n              games={gameComponents}\n              createGame={handleCreateRoom}\n              onDismiss={() => setShowNewGameForm(false)}\n            />\n          </Card>\n        )}\n      </Game>\n    </div>\n  );\n}\n","import React from \"react\";\nimport RunningGame from \"components/lobby/RunningGame\";\nimport Lobby from \"components/lobby/Lobby\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\"\n  }\n});\n\nexport default function LobbyRenderer(props) {\n  const { runningGame } = props;\n  return (\n    <div className={css(styles.container)}>\n      {runningGame && <RunningGame {...props} />}\n      {!runningGame && <Lobby {...props} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  text: {\n    fontFamily: [\"Fredoka One\", \"cursive\"],\n    color: colors.blueLight,\n    padding: 0,\n    margin: 0,\n  },\n});\n\nexport default function Logo() {\n  return (\n    <div>\n      <h1 className={css(styles.text)}>Paper Gamer</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Logo from \"components/logo\";\nimport { colors } from \"styles\";\n\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"4px\",\n    paddingBottom: \"4px\",\n    backgroundColor: colors.pinkVeryLight,\n  },\n});\n\nfunction Header() {\n  return (\n    <div className={css(styles.container)}>\n      <Logo />\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Game as TelephoneGame } from \"model/telephone/game\";\nimport { Board as TelephoneBoard } from \"components/telephone/board\";\nimport { Game as SaladbowlGame } from \"model/saladbowl/game\";\nimport { Board as SaladbowlBoard } from \"components/saladbowl/board\";\nimport { Client } from \"boardgame.io/react\";\nimport { Local } from \"boardgame.io/multiplayer\";\nimport LobbyRenderer from \"components/lobby/LobbyRenderer\";\nimport Header from \"components/header\";\nimport { colors } from \"styles\";\nimport { Lobby } from \"boardgame.io/react\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: colors.blueLight,\n  },\n  header: {},\n  main: {\n    flexGrow: 1,\n    overflow: \"auto\",\n  },\n  wrapper: {},\n});\n\n// const SaladbowlClient = Client({\n//   game: SaladbowlGame,\n//   board: SaladbowlBoard,\n//   multiplayer: Local(),\n//   numPlayers: 4,\n// });\n\n// const App = () => (\n//   <div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"0\" />\n//     </div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"1\" />\n//     </div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"2\" />\n//     </div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"3\" />\n//     </div>\n//   </div>\n// );\n\nconst importedGames = [\n  {\n    game: TelephoneGame,\n    board: TelephoneBoard,\n  },\n  {\n    game: SaladbowlGame,\n    board: SaladbowlBoard,\n  },\n];\n\nfunction App() {\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.header)}>\n        <Header />\n      </div>\n      <div className={css(styles.main)}>\n        <Lobby\n          gameServer={`https://games-server.oliverwilkie.com`}\n          lobbyServer={`https://games-server.oliverwilkie.com`}\n          gameComponents={importedGames}\n          renderer={LobbyRenderer}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}