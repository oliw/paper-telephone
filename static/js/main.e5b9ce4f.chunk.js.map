{"version":3,"sources":["model/telephone/game.js","styles.js","common/button.js","components/telephone/draw.js","components/telephone/write.js","common/card.js","helpers.js","components/telephone/summary.js","components/telephone/board.js","model/saladbowl/game.js","components/saladbowl/phases/pickgroups/picker.js","components/saladbowl/phases/pickgroups/spectator.js","components/saladbowl/phases/pickgroups.js","common/textinput.js","components/saladbowl/phases/buildbowl/writethings.js","components/saladbowl/phases/buildbowl.js","components/saladbowl/phases/play/describe.js","components/saladbowl/phases/play/guess.js","components/saladbowl/phases/play.js","common/text.js","components/saladbowl/group.js","components/saladbowl/status.js","common/game.js","components/saladbowl/board.js","components/lobby/RunningGame.js","components/player.js","components/lobby/Lobby.js","components/lobby/LobbyRenderer.js","components/logo.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["colors","sizes","styles","StyleSheet","create","main","height","borderRadius","fontWeight","backgroundColor","borderColor","color","borderWidth","outline","cursor","boxShadow","primary","secondary","Button","onClick","children","type","isPrimary","isSecondary","className","css","container","display","flexDirection","alignItems","canvas","buttonsContainer","input","fontSize","marginBottom","Writer","card","padding","borderStyle","header","width","textAlign","fontFamily","margin","Card","title","nameFromId","playerID","gameMetadata","Array","isArray","find","e","id","name","toColor","str","hash","i","length","charCodeAt","colour","toString","substr","text","minHeight","position","justifyContent","paddingTop","innerContainer","flexGrow","cardContainer","marginTop","Board","PhaseTurn","onBegin","G","ctx","wordsInBowl","random","Shuffle","countdownStartedAt","onEnd","currentWord","push","wordsStillInBowl","groups","groupOrderPos","playOrderPos","players","endIf","order","first","currentGroup","next","PhaseMoves","StartTheClock","_ctx","currentTime","words","pop","ScoreWord","currentPlayer","group","includes","score","wordsCollected","PhaseEndIf","PhaseOnEnd","wordsToReturn","Game","minPlayers","maxPlayers","setup","countdownSeconds","wordsWrittenPerPlayer","phases","PickGroups","start","moves","ChooseGroups","map","idx","g","flat","numPlayers","BuildBowl","turn","activePlayers","all","moveLimit","stages","WriteThings","AddWords","DescribeThings","DescribeThingsOneWord","ActItOut","reduce","a","b","Picker","props","_","playOrder","React","useState","numGroups","setGroups","formattedGroups","player","join","formatGroup","shuffledPlayers","shuffle","j","Spectator","Pickgroups","view","TextInput","placeholder","value","onChange","event","target","Writethings","numWords","fill","setWords","inputs","word","key","newWords","handleChange","some","w","Describe","events","secondsRemaining","setSecondsRemaining","useEffect","interval","setInterval","countdownEndsAt","Date","getTime","millisRemaining","Math","floor","clearInterval","timesUp","readyToStart","inProgress","rules","action","phase","endTurn","Guess","verb","Play","myGroup","isYourTurn","isYourTurnToGuess","isSpectator","Text","style","border","footer","members","marginRight","Player","Group","isGroupsTurn","p","teamMembers","guessors","filter","leader","flexWrap","row","alignContent","status","activePlayer","iconWithText","Groups","IconWithText","icon","Status","gameover","buildStatus","boxSizing","game","maxWidth","phaseTitle","headerContainer","headerLeft","flex","headerMiddle","headerRight","RunningGameHeader","runningRoom","playerName","handleExitRoom","gameName","RunningGame","runningGame","rooms","room","gameID","app","credentials","viewBox","xmlns","fillRule","d","clipRule","mainContainer","seatedPlayers","seatedPlayersLabel","seatedPlayerIcon","nameChooserContainer","gameContainer","NameChooser","onEnter","pendingPlayerName","setPlayerName","ExistingGameChooser","handleJoinRoom","handleLeaveRoom","handleStartGame","handleRequestNewGame","games","ExistingGame","playerSeat","playerIsSeated","freeSeat","freeSeats","freeSeatsAvailable","playerCanJoin","playerCanLeave","playerCanEnter","formattedGameName","NewGameCreator","createGame","onDismiss","setGame","setNumPlayers","selectedGameName","gameOptions","matchingGame","keys","slice","createNumPlayersRange","console","log","Lobby","errorMsg","gameComponents","handleEnterLobby","handleCreateRoom","handleExitLobby","handleRefreshRooms","showNameChooser","setShowNameChooser","showNewGameForm","setShowNewGameForm","nameChosen","LobbyRenderer","Logo","paddingBottom","Header","wrapper","importedGames","SaladbowlGame","board","SaladbowlBoard","App","gameServer","lobbyServer","renderer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5b9ce4f.chunk.js","sourcesContent":["import { Paper, paperHasCompletedEntry } from \"./paper\";\n\n// TURN\nfunction OnBegin(G, ctx) {\n  G.currentSubmissionMethod = ctx.turn % 2 === 0 ? \"draw\" : \"write\";\n}\n\n// TURN\nfunction OnEnd(G, ctx) {\n  // Exchange Papers\n  const { numPlayers } = ctx;\n  const currentHand = G.playerIdsToPaperIdx;\n  const newHand = {};\n  Object.keys(currentHand).forEach(playerId => {\n    const previousIdx = currentHand[playerId];\n    const nextIdx = (numPlayers + previousIdx - 1) % numPlayers;\n    newHand[playerId] = nextIdx;\n  });\n  return {\n    ...G,\n    playerIdsToPaperIdx: newHand\n  };\n}\n\n// MOVE\nfunction SubmitWriting(G, ctx, writing, ...args) {\n  const { playerID, turn } = ctx;\n  const paperIndex = G.playerIdsToPaperIdx[playerID];\n  G.papers[paperIndex].entries[turn - 1] = {\n    ...G.papers[paperIndex].entries[turn - 1],\n    writing,\n    author: playerID\n  };\n}\n\n// MOVE\nfunction SubmitDrawing(G, ctx, drawing) {\n  const { playerID, turn } = ctx;\n  const paperIndex = G.playerIdsToPaperIdx[playerID];\n  G.papers[paperIndex].entries[turn - 1] = {\n    ...G.papers[paperIndex].entries[turn - 1],\n    drawing,\n    author: playerID\n  };\n}\n\nfunction isTurnFinished(G, ctx) {\n  // The turn is finished when every paper has a complete\n  // entry for the currentEntry\n  const { turn } = ctx;\n  return G.papers.every(paper => paperHasCompletedEntry(paper, turn - 1));\n}\n\nfunction isGameFinished(G) {\n  // The game is finished when there is a filled in entry for the Nth round\n  const { numberOfRounds, papers } = G;\n  const isFinished = papers.every(paper =>\n    paperHasCompletedEntry(paper, numberOfRounds - 1)\n  );\n\n  if (isFinished) {\n    return {};\n  }\n\n  // Not finished\n  return null;\n}\n\nexport const Game = {\n  name: \"paper-telephone\",\n\n  setup: ctx => {\n    const numPlayers = ctx.numPlayers;\n    const numberOfRounds = numPlayers;\n    const papers = Array(numPlayers);\n    const playerIdsToPaperIdx = {};\n    for (let i = 0; i < numPlayers; i++) {\n      papers[i] = new Paper(i, numberOfRounds);\n      playerIdsToPaperIdx[`${i}`] = i;\n    }\n\n    return {\n      papers: papers,\n      numberOfRounds: numberOfRounds,\n      currentSubmissionMethod: null,\n      playerIdsToPaperIdx: playerIdsToPaperIdx\n    };\n  },\n\n  turn: {\n    onBegin: OnBegin,\n    onEnd: OnEnd,\n    endIf: isTurnFinished,\n    activePlayers: { all: \"submit\", moveLimit: 1 },\n    stages: {\n      submit: {\n        moves: {\n          SubmitWriting,\n          SubmitDrawing\n        }\n      }\n    }\n  },\n\n  moves: {},\n\n  endIf: isGameFinished,\n\n  minPlayers: 2,\n  maxPlayers: 10\n};\n\nexport default Game;\n","export const colors = {\n  pinkVeryLight: \"#ffffff\",\n  pinkLight: \"#fae3d9\",\n  pinkDark: \"#ffb6b9\",\n  blueLight: \"#bbded6\",\n  blueDark: \"#8ac6d1\",\n  black: \"#1C2826\"\n};\n\nexport const sizes = {\n  cardWidth: \"750px\",\n  textLarge: \"18pt\"\n};\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  main: {\n    height: \"30px\",\n    borderRadius: \"10px\",\n    fontWeight: \"bold\",\n    backgroundColor: colors.blueLight,\n    borderColor: \"grey\",\n    color: \"grey\",\n    borderWidth: \"2px\",\n    outline: \"none\",\n    cursor: \"pointer\",\n    \":hover\": {\n      boxShadow: \"1px 1px #888888\",\n    },\n  },\n  primary: {\n    backgroundColor: colors.blueLight,\n  },\n  secondary: {},\n});\n\nexport default function Button({ onClick, children, type }) {\n  const isPrimary = type === \"primary\";\n  const isSecondary = type !== \"primary\";\n\n  return (\n    <button\n      className={css(\n        styles.main,\n        isPrimary && styles.primary,\n        isSecondary && styles.secondary\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport Button from \"common/button\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  canvas: {\n    display: \"none\"\n  },\n  buttonsContainer: {\n    display: \"flex\"\n  }\n});\n\nfunction Drawer(props) {\n  const { onImageSelected, previousPhrase } = props;\n\n  const videoEl = useRef(null);\n  const canvasEl = useRef(null);\n\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    if (!videoEl || imageData) {\n      return;\n    }\n    navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {\n      let video = videoEl.current;\n      video.srcObject = stream;\n      video.play();\n    });\n  }, [videoEl, imageData]);\n\n  const handleTakePicClick = () => {\n    var ctx = canvasEl.current.getContext(\"2d\");\n    ctx.drawImage(\n      videoEl.current,\n      0,\n      0,\n      canvasEl.current.width,\n      canvasEl.current.height\n    );\n    setImageData(canvasEl.current.toDataURL(\"image/jpeg\"));\n  };\n\n  const handleClick = () => {\n    if (onImageSelected) {\n      onImageSelected(imageData);\n    }\n  };\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.header)}>\n        <p>Time to draw!</p>\n      </div>\n      <div className={css(styles.promptContainer)}>\n        <p>Can you draw this phrase and take a picture of it?</p>\n        <p>{previousPhrase}</p>\n      </div>\n      <div className={css(styles.drawingContainer)}>\n        {!imageData && (\n          <>\n            <video ref={videoEl} autoPlay={true}></video>\n            <canvas\n              className={css(styles.canvas)}\n              ref={canvasEl}\n              width={640}\n              height={480}\n            ></canvas>\n          </>\n        )}\n        {imageData && <img src={imageData} alt=\"Foo\" />}\n      </div>\n      <div className={css(styles.buttonsContainer)}>\n        {!imageData && (\n          <Button type=\"primary\" onClick={handleTakePicClick}>\n            Take picture\n          </Button>\n        )}\n        {imageData && (\n          <Button type=\"primary\" onClick={handleClick}>\n            Submit\n          </Button>\n        )}\n        {imageData && (\n          <Button onClick={() => setImageData(null)}>\n            Take a different picture\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Drawer;\n","import React from \"react\";\nimport { sizes } from \"styles\";\nimport Button from \"common/button\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  input: {\n    // height: \"200px\",\n    fontSize: sizes.textLarge,\n    marginBottom: \"10px\"\n  }\n});\n\nfunction Writer(props) {\n  const { onPhraseChosen, previousDrawingUri } = props;\n\n  const [writing, setWriting] = React.useState(\"\");\n\n  const handleWritingChange = event => {\n    setWriting(event.target.value);\n  };\n\n  const handleClick = () => {\n    onPhraseChosen(writing);\n  };\n\n  const firstTime = previousDrawingUri == null;\n\n  const firstTimeTitle = \"Lets Begin!\";\n  const guessDrawingTitle = \"Guess that phrase!\";\n  const title = firstTime ? firstTimeTitle : guessDrawingTitle;\n\n  const firstTimePrompt =\n    \"Enter a phrase that the next person will have to draw out.\";\n  const guessDrawingPrompt =\n    \"Take a look at the picture that the person before you drew. What do you think the word or phrase is?\";\n  const prompt = firstTime ? firstTimePrompt : guessDrawingPrompt;\n\n  return (\n    <div className={css(styles.container)}>\n      <p>{title}</p>\n      {previousDrawingUri && (\n        <img src={previousDrawingUri} width=\"640\" height=\"480\" alt=\"Foo\" />\n      )}\n      <p>{prompt}</p>\n      <input\n        className={css(styles.input)}\n        type=\"text\"\n        placeholder=\"Enter a phrase here\"\n        value={writing}\n        onChange={handleWritingChange}\n      />\n      <Button type=\"primary\" onClick={handleClick}>\n        Submit\n      </Button>\n    </div>\n  );\n}\n\nexport default Writer;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: \"white\",\n    padding: \"25px\",\n    borderWidth: \"2px\",\n    borderRadius: \"25px\",\n    borderColor: colors.blueLight,\n    borderStyle: \"solid\",\n  },\n  header: {\n    width: \"100%\",\n    textAlign: \"center\",\n    fontFamily: [\"Fredoka One\", \"cursive\"],\n    color: colors.blueLight,\n    padding: 0,\n    margin: 0,\n  },\n});\n\nexport default function Card({ title, children }) {\n  return (\n    <div className={css(styles.card)}>\n      <div className={css(styles.header)}>\n        <span>{title}</span>\n      </div>\n      {children}\n    </div>\n  );\n}\n","export function nameFromId(playerID, gameMetadata) {\n  if (!gameMetadata || !Array.isArray(gameMetadata)) {\n    return `${playerID}`;\n  }\n  const gameMetadataEntry = gameMetadata.find(\n    (e) => `${e.id}` === `${playerID}`\n  );\n  return gameMetadataEntry.name;\n}\n\nexport function toColor(str) {\n  var hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  var colour = \"#\";\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n}\n","import React from \"react\";\nimport Card from \"common/card\";\nimport { colors } from \"styles\";\nimport { nameFromId } from \"helpers\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  text: {\n    fontFamily: [\"Fredoka One\", \"cursive\"],\n    color: colors.blueLight,\n    padding: 0,\n    margin: 0,\n  },\n});\n\nfunction WrittenEntry({ entry, first, gameMetadata }) {\n  return (\n    <div>\n      {first && <p>First {nameFromId(entry.author, gameMetadata)} wrote</p>}\n      {!first && (\n        <p>\n          Which {nameFromId(entry.author, gameMetadata)} guessed was a drawing\n          of the phrase\n        </p>\n      )}\n      <p>{entry.writing}</p>\n    </div>\n  );\n}\n\nfunction DrawnEntry({ entry, gameMetadata }) {\n  return (\n    <div>\n      <p>Which {nameFromId(entry.author, gameMetadata)} then drew as</p>\n      <img src={entry.drawing} width=\"640\" height=\"480\" alt=\"Foo\" />\n    </div>\n  );\n}\n\nfunction PaperSummary({ paper, gameMetadata }) {\n  const { entries } = paper;\n  const summaries = entries.map((entry, idx) => {\n    if (idx % 2 === 0) {\n      return (\n        <WrittenEntry\n          key={idx}\n          entry={entry}\n          first={idx === 0}\n          gameMetadata={gameMetadata}\n        />\n      );\n    } else {\n      return <DrawnEntry key={idx} entry={entry} gameMetadata={gameMetadata} />;\n    }\n  });\n  return (\n    <div>\n      <p>\n        Heres what {nameFromId(paper.player, gameMetadata)}'s paper looked like\n      </p>\n      {summaries}\n    </div>\n  );\n}\n\nexport default function Summary({ game, gameMetadata }) {\n  const [currentPaperIdx, setCurrentPaperIdx] = React.useState(0);\n  const paper = game.papers[currentPaperIdx];\n  const handleNextClick = () => {\n    setCurrentPaperIdx((currentPaperIdx + 1) % game.papers.length);\n  };\n  const handleBackClick = () => {\n    setCurrentPaperIdx(\n      (game.papers.length + currentPaperIdx - 1) % game.papers.length\n    );\n  };\n  return (\n    <div>\n      <Card>\n        <p>Its the end of the game!</p>\n        <p>Lets take a look at what everybody wrote and drew</p>\n        <p>\n          You're currently looking at {nameFromId(paper.player, gameMetadata)}'s\n          paper\n        </p>\n        <button onClick={handleBackClick}>Back</button>\n        <button onClick={handleNextClick}>Next Thread</button>\n      </Card>\n      <Card>\n        <PaperSummary paper={paper} gameMetadata={gameMetadata} />\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Drawer from \"./draw\";\nimport Writer from \"./write\";\nimport Card from \"common/card\";\nimport Summary from \"components/telephone/summary\";\nimport { latestEntry } from \"../../model/telephone/paper\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors } from \"../../styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    minHeight: \"100%\",\n    position: \"absolute\",\n    backgroundColor: colors.blueLight,\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"15px\",\n  },\n  innerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  main: {\n    flexGrow: 1,\n  },\n  cardContainer: {\n    marginTop: \"35px\",\n  },\n});\n\nexport function Board(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const handleSubmitWriting = (writing) => {\n    moves.SubmitWriting(writing);\n  };\n\n  const handleSubmitDrawing = (drawingUri) => {\n    moves.SubmitDrawing(drawingUri);\n  };\n\n  if (ctx.gameover) {\n    return (\n      <div className={css(styles.container)}>\n        <div className={css(styles.innerContainer)}>\n          <div className={css(styles.cardContainer)}>\n            <Summary game={G} gameMetadata={gameMetadata} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!playerID) {\n    return (\n      <div className={css(styles.container)}>\n        <div className={css(styles.innerContainer)}>\n          <div className={css(styles.cardContainer)}>\n            <Card>\n              <h1>Unknown Player</h1>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const currentPageIdx = G.playerIdsToPaperIdx[playerID];\n  const currentPage = G.papers[currentPageIdx];\n  const latestEnt = latestEntry(currentPage);\n\n  let latestDrawingUri = null;\n  let latestWriting = null;\n\n  if (latestEnt && G.currentSubmissionMethod === \"write\") {\n    latestDrawingUri = latestEnt.drawing;\n  }\n\n  if (latestEnt && G.currentSubmissionMethod === \"draw\") {\n    latestWriting = latestEnt.writing;\n  }\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.innerContainer)}>\n        <div className={css(styles.cardContainer)}>\n          <Card>\n            <div className={css(styles.details)}>\n              <p>\n                The current turn is: {ctx.turn}, which means its time to:{\" \"}\n                {G.currentSubmissionMethod}\n              </p>\n              <p>\n                There are {ctx.numPlayers} players. You are player {playerID}\n              </p>\n            </div>\n          </Card>\n        </div>\n        <div className={css(styles.cardContainer)}>\n          <Card>\n            <div className={css(styles.main)}>\n              {G.currentSubmissionMethod === \"write\" &&\n                ctx.activePlayers[playerID] && (\n                  <Writer\n                    onPhraseChosen={handleSubmitWriting}\n                    previousDrawingUri={latestDrawingUri}\n                  />\n                )}\n              {G.currentSubmissionMethod === \"draw\" &&\n                ctx.activePlayers[playerID] && (\n                  <Drawer\n                    onImageSelected={handleSubmitDrawing}\n                    previousPhrase={latestWriting}\n                  />\n                )}\n              {!ctx.activePlayers[playerID] && (\n                <p>Waiting for others to finish their move</p>\n              )}\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","const WORDS_PER_PLAYER = 1;\n\nconst PhaseTurn = {\n  onBegin: (G, ctx) => {\n    // Shuffle the words\n    G.wordsInBowl = ctx.random.Shuffle(G.wordsInBowl);\n    // Make sure the clock is reset\n    G.countdownStartedAt = null;\n  },\n  onEnd: (G, ctx) => {\n    // Return word in hand to bowl\n    if (G.currentWord) {\n      G.wordsInBowl.push(G.currentWord);\n      G.currentWord = null;\n    }\n\n    const wordsStillInBowl = G.wordsInBowl.length > 0;\n\n    G.groups[G.groupOrderPos].playOrderPos =\n      (G.groups[G.groupOrderPos].playOrderPos + 1) %\n      G.groups[G.groupOrderPos].players.length;\n\n    // If the turn ended because they ran out of time, play will move to the next\n    if (wordsStillInBowl) {\n      G.groupOrderPos = (G.groupOrderPos + 1) % G.groups.length;\n    }\n  },\n  endIf: (G, ctx) => {\n    // Turn is automatically over once all the words are gone\n    return G.wordsInBowl.length === 0 && G.currentWord == null;\n  },\n  order: {\n    first: (G) => {\n      const currentGroup = G.groups[G.groupOrderPos];\n      const currentPersonInGroup =\n        currentGroup.players[currentGroup.playOrderPos];\n      debugger;\n      return currentPersonInGroup;\n    },\n    next: (G) => {\n      const currentGroup = G.groups[G.groupOrderPos];\n      const currentPersonInGroup =\n        currentGroup.players[currentGroup.playOrderPos];\n      return currentPersonInGroup;\n    },\n  },\n};\n\nconst PhaseMoves = {\n  StartTheClock: (G, _ctx, currentTime) => {\n    if (G.countdownStartedAt != null) {\n      // Clock is already started\n      return;\n    }\n    // Draw a word\n    const words = G.wordsInBowl;\n    G.currentWord = words.pop();\n    G.wordsInBowl = words;\n    // Start the Clock\n    G.countdownStartedAt = currentTime;\n  },\n  ScoreWord: (G, ctx) => {\n    if (!G.currentWord) {\n      return;\n    }\n    // Get group for current player\n    const currentPlayer = ctx.currentPlayer;\n    const currentGroup = G.groups.find((group) =>\n      group.players.includes(currentPlayer)\n    );\n    // Add to score\n    currentGroup.score = currentGroup.score += 1;\n    // Add word to collectedWords\n    const currentWord = G.currentWord;\n    G.wordsCollected.push(currentWord);\n    G.currentWord = null;\n    if (G.wordsInBowl === []) {\n      // Stop the clock\n      G.countdownStartedAt = null;\n    } else {\n      // Draw a word\n      const words = G.wordsInBowl;\n      G.currentWord = words.pop();\n      G.wordsInBowl = words;\n    }\n  },\n};\n\nconst PhaseEndIf = (G, ctx) => {\n  // Phase is over automatically once all the words are gone\n  return G.wordsInBowl.length === 0 && G.currentWord == null;\n};\n\nconst PhaseOnEnd = (G, _ctx) => {\n  // Return all the words to the bowl\n  const wordsToReturn = G.wordsCollected;\n  G.wordsInBowl = wordsToReturn;\n  G.wordsCollected = [];\n  // Make sure the clock is reset\n  G.countdownStartedAt = null;\n};\n\nexport const Game = {\n  name: \"saladbowl\",\n  minPlayers: 4,\n  maxPlayers: 20,\n\n  setup: (ctx) => {\n    return {\n      countdownSeconds: null,\n      groups: [\n        // {\n        //   score: 0,\n        //   players: [],\n        //   playOrderPos: 0,\n        //   name: 0\n        // }\n      ],\n      wordsInBowl: [],\n      currentWord: null,\n      wordsCollected: [],\n      countdownStartedAt: null,\n      wordsWrittenPerPlayer: WORDS_PER_PLAYER,\n      groupOrderPos: 0,\n    };\n  },\n\n  phases: {\n    PickGroups: {\n      start: true, // The first phase\n      moves: {\n        ChooseGroups: (G, _ctx, groups) => {\n          G.groups = groups.map((group, idx) => {\n            return {\n              score: 0,\n              players: group,\n              playOrderPos: 0,\n              name: `${idx + 1}`,\n            };\n          });\n        },\n      },\n      endIf: (G, ctx) => {\n        // Everyone is in a group\n        return G.groups.map((g) => g.players).flat().length === ctx.numPlayers;\n      },\n      next: \"BuildBowl\",\n    },\n    BuildBowl: {\n      turn: {\n        activePlayers: {\n          all: \"WriteThings\",\n          moveLimit: 1,\n        },\n        stages: {\n          WriteThings: {\n            moves: {\n              AddWords: (G, ctx, words) => {\n                G.wordsInBowl = [...G.wordsInBowl, ...words];\n              },\n            },\n          },\n        },\n      },\n      endIf: (G, ctx) => {\n        // Phase is done if there are enough words in the bowl\n        return G.wordsInBowl.length === ctx.numPlayers * WORDS_PER_PLAYER;\n      },\n      next: \"DescribeThings\",\n    },\n    DescribeThings: {\n      onBegin: (G) => {\n        G.countdownSeconds = 30;\n      },\n      endIf: PhaseEndIf,\n      onEnd: PhaseOnEnd,\n      next: \"DescribeThingsOneWord\",\n      turn: {\n        ...PhaseTurn,\n      },\n      moves: {\n        ...PhaseMoves,\n      },\n    },\n    DescribeThingsOneWord: {\n      onBegin: (G) => {\n        G.countdownSeconds = 30;\n      },\n      endIf: PhaseEndIf,\n      onEnd: PhaseOnEnd,\n      next: \"ActItOut\",\n      turn: {\n        ...PhaseTurn,\n      },\n      moves: {\n        ...PhaseMoves,\n      },\n    },\n    ActItOut: {\n      onBegin: (G) => {\n        G.countdownSeconds = 45;\n      },\n      endIf: PhaseEndIf,\n      onEnd: PhaseOnEnd,\n      turn: {\n        ...PhaseTurn,\n      },\n      moves: {\n        ...PhaseMoves,\n      },\n    },\n  },\n\n  endIf: (G, ctx) => {\n    const accumulatedPoints = G.groups\n      .map((g) => g.score)\n      .reduce((a, b) => a + b, 0);\n    const numRounds = 3;\n    const maxPoints = numRounds * G.wordsWrittenPerPlayer * ctx.numPlayers;\n    if (accumulatedPoints < maxPoints) {\n      return null;\n    } else {\n      return true;\n    }\n  },\n};\n\nexport default Game;\n","import React from \"react\";\nimport shuffle from \"lodash/shuffle\";\nimport Button from \"common/button\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { nameFromId } from \"helpers\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n});\n\nexport function Picker(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const numPlayers = ctx.numPlayers;\n  const players = ctx.playOrder;\n  const [numGroups, setNumGroups] = React.useState(2);\n  const [groups, setGroups] = React.useState([]);\n  const handleShuffleClick = () => {\n    let groups = Array(numGroups);\n    let shuffledPlayers = shuffle(players);\n    let i = 0;\n    let j = 0;\n    while (i < shuffledPlayers.length) {\n      if (groups[j] == null) {\n        groups[j] = [];\n      }\n      groups[j].push(shuffledPlayers[i]);\n      j = (j + 1) % groups.length;\n      i++;\n    }\n    setGroups(groups);\n  };\n\n  const handleClick = () => {\n    moves.ChooseGroups(groups);\n  };\n\n  const formatGroup = (group) => {\n    const players = group.map((player) => nameFromId(player, gameMetadata));\n    return `(${players.join(\",\")})`;\n  };\n\n  const formattedGroups = groups.map((g) => formatGroup(g));\n\n  return (\n    <div className={css(styles.container)}>\n      <p>Ok! It's your turn to decide who goes in what group</p>\n      <Button onClick={handleShuffleClick}>\n        Randomize the {numGroups} groups!\n      </Button>\n      {groups.length > 0 && (\n        <>\n          <p>The proposed groups are {formattedGroups.join(\",\")}</p>\n          <Button onClick={handleClick}>Choose these groups</Button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Picker;\n","import React from \"react\";\n\nexport function Spectator(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  return (\n    <div>\n      <p>Nothing for you to do, so sit back and relax!</p>\n    </div>\n  );\n}\n\nexport default Spectator;\n","import React from \"react\";\nimport Picker from \"./pickgroups/picker\";\nimport Spectator from \"./pickgroups/spectator\";\n\nexport function Pickgroups(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const isPicker = playerID === ctx.currentPlayer;\n\n  const view = isPicker ? <Picker {...props} /> : <Spectator {...props} />;\n\n  return <div>{view}</div>;\n}\n\nexport default Pickgroups;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  input: {\n    // height: \"200px\",\n    fontSize: sizes.textLarge,\n    marginBottom: \"5px\",\n    borderRadius: \"10px\",\n    borderColor: colors.blueLight,\n    borderWidth: \"2px\",\n  },\n});\n\nexport default function TextInput({ placeholder, value, onChange }) {\n  const handleChange = (event) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <input\n      className={css(styles.input)}\n      type=\"text\"\n      placeholder={placeholder}\n      value={value}\n      onChange={handleChange}\n    />\n  );\n}\n","import React from \"react\";\nimport TextInput from \"common/textinput\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\nimport Button from \"common/button\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n});\n\nexport function Writethings(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const numWords = G.wordsWrittenPerPlayer;\n  const [words, setWords] = React.useState(Array(numWords).fill(null));\n\n  const handleChange = (value, i) => {\n    const newWords = [...words];\n    newWords[i] = value;\n    setWords(newWords);\n  };\n\n  const inputs = words.map((word, i) => {\n    return (\n      <TextInput\n        key={i}\n        value={word || \"\"}\n        onChange={(word) => handleChange(word, i)}\n      />\n    );\n  });\n\n  const handleClick = () => {\n    if (words.some((w) => w == null || w.length === 0)) {\n      return;\n    }\n    moves.AddWords(words);\n  };\n\n  const hasFinishedTurn = ctx.activePlayers[playerID] == null;\n\n  if (hasFinishedTurn) {\n    return <p>You're all done. Waiting for the others!</p>;\n  }\n\n  return (\n    <div className={css(styles.container)}>\n      <p>Choose {numWords} words to go in the bowl</p>\n      <p>\n        Decide on the video call if there should be a theme to the words (e.g.\n        same letter)\n      </p>\n      {inputs}\n      <Button onClick={handleClick}>Add Words To Bowl</Button>\n    </div>\n  );\n}\n\nexport default Writethings;\n","import React from \"react\";\nimport Writethings from \"components/saladbowl/phases/buildbowl/writethings\";\n\nexport function BuildBowl(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  return (\n    <div>\n      <Writethings {...props} />\n    </div>\n  );\n}\n\nexport default BuildBowl;\n","import React from \"react\";\nimport Button from \"common/button\";\n\nexport function Describe(props) {\n  const { moves, events, G, ctx, playerID, gameMetadata } = props;\n\n  const handleClockClick = () => {\n    moves.StartTheClock(new Date().getTime());\n  };\n\n  const [secondsRemaining, setSecondsRemaining] = React.useState(null);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      if (G.countdownStartedAt) {\n        const countdownEndsAt =\n          G.countdownStartedAt + G.countdownSeconds * 1000;\n        const currentTime = new Date().getTime();\n        if (currentTime >= countdownEndsAt) {\n          setSecondsRemaining(0);\n        } else {\n          const millisRemaining = countdownEndsAt - currentTime;\n          setSecondsRemaining(Math.floor(millisRemaining / 1000));\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [G.countdownStartedAt, G.countdownSeconds]);\n\n  const handleScore = () => {\n    moves.ScoreWord();\n  };\n\n  const endTurn = () => {\n    events.endTurn();\n  };\n\n  const timesUp = secondsRemaining === 0;\n  const readyToStart = !G.countdownStartedAt;\n  const inProgress = G.countdownStartedAt && !timesUp;\n\n  let rules = \"\";\n  let action = \"\";\n  if (ctx.phase === \"DescribeThings\") {\n    rules =\n      \"Its your turn to describe words to the rest of your group! There's no skipping, and make sure you don't say the word itself!\";\n    action = \"Describe\";\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    rules =\n      \"Its your turn! This time you can only say one word to describe it, choose wisely!\";\n    action = \"Descibe using one word:\";\n  } else if (ctx.phase === \"ActItOut\") {\n    rules =\n      \"Act out the word on the paper. Noises are allowed. You get a bit longer on the clock, make sure your team is watching you on the video!\";\n    action = \"Act out:\";\n  }\n\n  return (\n    <div>\n      <p>{rules}</p>\n      {readyToStart && (\n        <Button onClick={handleClockClick}>Start the Clock</Button>\n      )}\n      {inProgress && (\n        <>\n          <p>\n            {action}: {G.currentWord}\n          </p>\n          <Button onClick={handleScore}>Score!</Button>\n        </>\n      )}\n      {timesUp && (\n        <>\n          <p>Times up!</p>\n          <Button onClick={endTurn}>End Turn</Button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Describe;\n","import React from \"react\";\nimport { nameFromId } from \"helpers\";\n\nexport function Guess(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  let verb = \"doing\";\n  if (ctx.phase === \"DescribeThings\") {\n    verb = \"describing\";\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    verb = \"describing\";\n  } else if (ctx.phase === \"ActItOut\") {\n    verb = \"acting\";\n  }\n\n  return (\n    <div>\n      <p>\n        Its your turn to guess what{\" \"}\n        {nameFromId(ctx.currentPlayer, gameMetadata)} is {verb}!\n      </p>\n    </div>\n  );\n}\n\nexport default Guess;\n","import React from \"react\";\nimport Describe from \"./play/describe\";\nimport Guess from \"./play/guess\";\n\nexport function Play(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  const myGroup = G.groups.find((g) => g.players.includes(playerID));\n  const isYourTurn = playerID === ctx.currentPlayer;\n  const isYourTurnToGuess =\n    !isYourTurn && myGroup.players.includes(ctx.currentPlayer);\n  const isSpectator = !isYourTurn && !isYourTurnToGuess;\n\n  return (\n    <div>\n      {isYourTurn && <Describe {...props} />}\n      {isYourTurnToGuess && <Guess {...props} />}\n      {isSpectator && <p>Relax! Is not your group's turn.</p>}\n    </div>\n  );\n}\n\nexport default Play;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 0,\n  },\n});\n\nexport default function Text({ color, children }) {\n  const style = color ? { color: `${color}` } : null;\n  return (\n    <span className={css(styles.container)} style={style}>\n      {children}\n    </span>\n  );\n}\n","import React from \"react\";\nimport { nameFromId, toColor } from \"helpers\";\nimport { colors } from \"styles\";\nimport Text from \"common/text\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: colors.pinkVeryLight,\n    padding: \"3px\",\n    borderRadius: \"10px\",\n    border: \"2px solid\",\n    borderColor: colors.blueLight,\n  },\n  header: {\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  footer: {\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  members: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  player: {\n    marginRight: \"5px\",\n  },\n});\n\nfunction Player({ player, gameMetadata }) {\n  const name = nameFromId(player, gameMetadata);\n  const color = toColor(name);\n  return (\n    <div className={css(styles.player)}>\n      <Text color={color}>{name}</Text>\n    </div>\n  );\n}\n\nfunction Group({ group, G, ctx, gameMetadata }) {\n  const currentPlayer = !ctx.activePlayers && ctx.currentPlayer;\n\n  const isGroupsTurn = group.players.find((p) => p === currentPlayer);\n\n  const teamMembers = group.players.map((p, idx) => (\n    <Player key={idx} player={p} gameMetadata={gameMetadata} />\n  ));\n\n  const turn = <Player player={currentPlayer} gameMetadata={gameMetadata} />;\n  const guessors = group.players\n    .filter((p) => p !== currentPlayer)\n    .map((p, idx) => (\n      <Player key={idx} player={p} gameMetadata={gameMetadata} />\n    ));\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.members)}>\n        {isGroupsTurn && (\n          <>\n            {turn}\n            <span>➡</span>\n            {guessors}\n          </>\n        )}\n        {!isGroupsTurn && teamMembers}\n      </div>\n      <div className={css(styles.footer)}>\n        <Text>Score: {group.score}</Text>\n      </div>\n    </div>\n  );\n}\n\nexport default Group;\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite/no-important\";\nimport { nameFromId } from \"helpers\";\nimport Group from \"./group\";\n\nconst styles = StyleSheet.create({\n  leader: {\n    marginRight: \"3px\",\n    display: \"flex\",\n  },\n  players: {\n    display: \"flex\",\n  },\n  groups: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    marginRight: \"10px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n  },\n  row: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignContent: \"baseline\",\n  },\n  status: {\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  activePlayer: {\n    borderRadius: \"3px\",\n    border: \"2px solid\",\n    borderColor: colors.blueLight,\n  },\n  iconWithText: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    alignItems: \"center\",\n  },\n});\n\nfunction Groups(props) {\n  const { moves, events, G, ctx, playerID, gameMetadata } = props;\n\n  const groups = G.groups.map((group) => (\n    <div className={css(styles.group)}>\n      <Group group={group} G={G} ctx={ctx} gameMetadata={gameMetadata} />\n    </div>\n  ));\n\n  return (\n    <div className={css(styles.groups)}>{groups.length > 0 && groups}</div>\n  );\n}\n\nfunction IconWithText({ icon, text }) {\n  return (\n    <div className={css(styles.iconWithText)}>\n      <span>{icon}</span>:<span>{text}</span>\n    </div>\n  );\n}\n\nfunction buildStatus(G, ctx, gameMetadata) {\n  let status = \"Unknown\";\n  let currentPlayer = ctx.currentPlayer;\n\n  if (ctx.gameover) {\n    status = \"Its game over! Thanks for playing!\";\n  } else if (ctx.phase === \"PickGroups\") {\n    status = `Time for ${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )}'s turn to choose groups`;\n  } else if (ctx.phase === \"BuildBowl\") {\n    status = \"Time for everyone fill up the bowl with words\";\n  } else if (ctx.phase === \"DescribeThings\") {\n    status = `Time for player ${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )} to describe words to the rest of their group`;\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    status = `Time for ${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )} to describe words using just one word to the rest of their group`;\n  } else if (ctx.phase === \"ActItOut\") {\n    status = `Time for ${nameFromId(\n      currentPlayer,\n      gameMetadata\n    )} to act out a word to the rest of their group`;\n  }\n\n  return status;\n}\n\nexport function Status(props) {\n  const { moves, events, G, ctx, playerID, gameMetadata } = props;\n\n  const [secondsRemaining, setSecondsRemaining] = React.useState(null);\n\n  const status = buildStatus(G, ctx, gameMetadata);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      if (G.countdownStartedAt) {\n        const countdownEndsAt =\n          G.countdownStartedAt + G.countdownSeconds * 1000;\n        const currentTime = new Date().getTime();\n        if (currentTime >= countdownEndsAt) {\n          setSecondsRemaining(0);\n        } else {\n          const millisRemaining = countdownEndsAt - currentTime;\n          setSecondsRemaining(Math.floor(millisRemaining / 1000));\n        }\n      } else {\n        setSecondsRemaining(0);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [G.countdownStartedAt, G.countdownSeconds]);\n\n  let wordsInBowl = G.wordsInBowl.length;\n  if (G.currentWord) {\n    wordsInBowl += 1;\n  }\n\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.row)}>\n        <IconWithText icon=\"🥣\" text={wordsInBowl} />\n        <IconWithText icon=\"⏲\" text={secondsRemaining || \"N/A\"} />\n      </div>\n      <Groups {...props} />\n      <div className={css(styles.status)}>{status}</div>\n    </div>\n  );\n}\n\nexport default Status;\n","import React from \"react\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { colors, sizes } from \"styles\";\n\nconst styles = StyleSheet.create({\n  container: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    backgroundColor: colors.blueLight,\n    display: \"flex\",\n    justifyContent: \"center\",\n    padding: \"3px\",\n    minHeight: \"100%\",\n  },\n  game: {\n    maxWidth: sizes.cardWidth,\n    width: \"100%\",\n  },\n});\n\nexport default function Game({ children }) {\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.game)}>{children}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Pickgroups from \"./phases/pickgroups\";\nimport BuildBowl from \"./phases/buildbowl\";\nimport Play from \"./phases/play\";\nimport Status from \"./status\";\nimport Game from \"common/game\";\nimport Card from \"common/card\";\n\nexport function Board(props) {\n  const { moves, _, G, ctx, playerID, gameMetadata } = props;\n\n  let phase = null;\n  let phaseTitle = null;\n  if (ctx.phase === \"PickGroups\") {\n    phase = <Pickgroups {...props} />;\n    phaseTitle = \"Pick Groups\";\n  } else if (ctx.phase === \"BuildBowl\") {\n    phase = <BuildBowl {...props} />;\n    phaseTitle = \"Fill The Bowl\";\n  } else if (ctx.phase === \"DescribeThings\") {\n    phase = <Play {...props} />;\n    phaseTitle = \"Describe The Word\";\n  } else if (ctx.phase === \"DescribeThingsOneWord\") {\n    phase = <Play {...props} />;\n    phaseTitle = \"Describe The Word using Just One Word!\";\n  } else if (ctx.phase === \"ActItOut\") {\n    phase = <Play {...props} />;\n    phaseTitle = \"Act It Out\";\n  }\n\n  return (\n    <Game>\n      <Card>\n        <Status {...props} />\n      </Card>\n      {phase && <Card title={phaseTitle}>{phase}</Card>}\n    </Game>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n    position: \"relative\",\n  },\n  headerContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    padding: \"3px\",\n  },\n  headerLeft: {\n    flex: 1,\n    textAlign: \"left\",\n  },\n  headerMiddle: {\n    flex: 1,\n    textAlign: \"center\",\n  },\n  headerRight: {\n    flex: 1,\n    textAlign: \"right\",\n  },\n});\n\nfunction RunningGameHeader({ runningRoom, playerName, handleExitRoom }) {\n  if (!runningRoom) {\n    return <p>Please wait</p>;\n  }\n  const gameName =\n    runningRoom.gameName === \"paper-telephone\"\n      ? \"Paper Telephone\"\n      : runningRoom.gameName;\n  const exitGame = () => {\n    handleExitRoom();\n  };\n  return (\n    <div className={css(styles.headerContainer)}>\n      <div className={css(styles.headerLeft)}>\n        <button onClick={exitGame}>Leave and return to Lobby</button>\n      </div>\n      <div className={css(styles.headerMiddle)}>Now playing: {gameName}</div>\n      <div className={css(styles.headerRight)}>Playing as: {playerName}</div>\n    </div>\n  );\n}\n\nexport default function RunningGame(props) {\n  const { runningGame, rooms, playerName, handleExitRoom } = props;\n  const runningRoom = rooms.find((room) => room.gameID === runningGame.gameID);\n  return (\n    <div className={css(styles.container)}>\n      <RunningGameHeader\n        runningGame={runningGame}\n        runningRoom={runningRoom}\n        playerName={playerName}\n        handleExitRoom={handleExitRoom}\n      />\n      <runningGame.app\n        gameID={runningGame.gameID}\n        playerID={runningGame.playerID}\n        credentials={runningGame.credentials}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { toColor } from \"helpers\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    textAlign: \"center\",\n  },\n  icon: {},\n  text: {\n    padding: 0,\n    margin: 0,\n  },\n});\n\nexport default function Player({ name }) {\n  const color = toColor(name);\n  return (\n    <div className={css(styles.container)}>\n      <svg\n        className={css(styles.icon)}\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 16 16\"\n        fill={color}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 100-6 3 3 0 000 6z\"\n          clipRule=\"evenodd\"\n        />\n      </svg>\n      <p className={css(styles.text)} style={{ color: `${color}` }}>\n        {name}\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport Card from \"common/card\";\nimport Player from \"components/player\";\nimport Game from \"common/game\";\nimport Button from \"common/button\";\nimport TextInput from \"common/textinput\";\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  mainContainer: {\n    flexGrow: \"1\",\n    width: \"100%\",\n    minHeight: \"100%\",\n    backgroundColor: colors.blueLight,\n    paddingTop: \"15px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  seatedPlayers: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  seatedPlayersLabel: {\n    marginRight: \"10px\",\n  },\n  seatedPlayerIcon: {\n    marginRight: \"10px\",\n  },\n  nameChooserContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  game: {\n    borderRadius: \"10px\",\n    borderStyle: \"solid\",\n    borderColor: colors.blueLight,\n    borderWidth: \"2px\",\n    padding: \"10px\",\n  },\n  gameContainer: {\n    marginBottom: \"10px\",\n  },\n});\n\nfunction NameChooser({ onEnter }) {\n  const [pendingPlayerName, setPlayerName] = React.useState(\"\");\n\n  const onClickEnter = () => {\n    if (pendingPlayerName === \"\") return;\n    setPlayerName(\"\");\n    onEnter(pendingPlayerName);\n  };\n\n  return (\n    <div className={css(styles.nameChooserContainer)}>\n      <TextInput\n        placeholder=\"Choose a name\"\n        value={pendingPlayerName}\n        onChange={setPlayerName}\n      />\n      <Button className=\"buttons\" onClick={onClickEnter}>\n        Enter\n      </Button>\n    </div>\n  );\n}\n\nfunction ExistingGameChooser({\n  rooms,\n  playerName,\n  handleJoinRoom,\n  handleLeaveRoom,\n  handleStartGame,\n  handleRequestNewGame,\n}) {\n  const games = rooms.map((room) => (\n    <div key={room.gameID} className={css(styles.gameContainer)}>\n      <ExistingGame\n        room={room}\n        playerName={playerName}\n        handleJoinRoom={handleJoinRoom}\n        handleLeaveRoom={handleLeaveRoom}\n        handleStartGame={handleStartGame}\n      />\n    </div>\n  ));\n  return (\n    <div>\n      <p>Choose from {rooms.length} existing games</p>\n      {games}\n      <p>\n        Or... <Button onClick={handleRequestNewGame}>Host a new game</Button>\n      </p>\n    </div>\n  );\n}\n\nfunction ExistingGame({\n  room,\n  playerName,\n  handleJoinRoom,\n  handleLeaveRoom,\n  handleStartGame,\n}) {\n  const { gameID, gameName, players } = room;\n  const playerNames = players.map((p) => p.name).join(\",\");\n  const playerSeat = players.find((p) => p.name === playerName);\n  const playerIsSeated = playerSeat != null;\n  const freeSeat = players.find((p) => !p.name);\n  const freeSeats = players.filter((p) => !p.name);\n  const freeSeatsAvailable = freeSeat != null;\n  const gameIsFullySeated = !freeSeatsAvailable;\n  const playerHasName = playerName !== \"Visitor\";\n  const playerCanJoin = playerHasName && !playerIsSeated && freeSeatsAvailable;\n  const playerCanLeave = playerIsSeated;\n  const playerCanEnter = playerIsSeated && gameIsFullySeated;\n\n  const startGame = () => {\n    handleStartGame(gameName, {\n      gameID: gameID,\n      playerID: \"\" + playerSeat.id,\n      numPlayers: players.length,\n    });\n  };\n\n  const joinGame = () => {\n    handleJoinRoom(gameName, gameID, \"\" + freeSeat.id);\n  };\n\n  const leaveGame = () => {\n    handleLeaveRoom(gameName, gameID);\n  };\n\n  const seatedPlayers = players\n    .map((p) => p.name)\n    .filter((name) => name != null)\n    .map((name) => (\n      <div id={name} className={css(styles.seatedPlayerIcon)}>\n        <Player name={name} key={name} />\n      </div>\n    ));\n\n  const formattedGameName =\n    gameName === \"paper-telephone\" ? \"Telephone\" : gameName;\n\n  return (\n    <div className={css(styles.game)}>\n      <p>{formattedGameName}</p>\n      <div className={css(styles.seatedPlayers)}>\n        <p className={css(styles.seatedPlayersLabel)}>Players:</p>\n        {seatedPlayers}\n      </div>\n      {freeSeatsAvailable && (\n        <p>Waiting for {freeSeats.length} more players to take a seat</p>\n      )}\n      {playerCanJoin && <Button onClick={joinGame}>Take a Seat</Button>}\n      {playerCanEnter && (\n        <div>\n          <p>Everyone is sat down!</p>\n          <Button onClick={startGame}>Enter the game</Button>\n        </div>\n      )}\n      {playerCanLeave && <Button onClick={leaveGame}>Leave</Button>}\n    </div>\n  );\n}\n\nfunction NewGameCreator({ games, createGame, onDismiss }) {\n  const [game, setGame] = React.useState(games[0]);\n  const [numPlayers, setNumPlayers] = React.useState(games[0].game.minPlayers);\n\n  const selectedGameName = game ? game.game.name : \"--\";\n\n  const gameOptions = games.map((g) => (\n    <option key={g.game.name} value={g.game.name}>\n      {g.game.name}\n    </option>\n  ));\n\n  const onClick = () => {\n    console.log(selectedGameName);\n    createGame(selectedGameName, numPlayers);\n    onDismiss();\n  };\n\n  const onGameSelected = (event) => {\n    const name = event.target.value;\n    if (name === \"\") {\n      setGame(null);\n      return;\n    }\n    const matchingGame = games.find((g) => g.game.name === name);\n    setGame(matchingGame);\n    if (numPlayers < matchingGame.game.minPlayers) {\n      setNumPlayers(matchingGame.game.minPlayers);\n    }\n    if (numPlayers > matchingGame.game.maxPlayers) {\n      setNumPlayers(matchingGame.game.minPlayers);\n    }\n  };\n\n  const onNumPlayersSelected = (event) => {\n    const numPlayers = event.target.value;\n    setNumPlayers(numPlayers);\n  };\n\n  const createNumPlayersOption = (idx) => {\n    return (\n      <option key={\"num-option-\" + idx} value={idx}>\n        {idx}\n      </option>\n    );\n  };\n\n  const createNumPlayersRange = (game) => {\n    return [...new Array(game.game.maxPlayers + 1).keys()].slice(\n      game.game.minPlayers\n    );\n  };\n\n  return (\n    <div>\n      <p>Which game do you want to play?</p>\n      <select value={selectedGameName} onChange={onGameSelected}>\n        {gameOptions}\n      </select>\n      <p>And how many players?</p>\n      <select value={numPlayers} onChange={onNumPlayersSelected}>\n        {createNumPlayersRange(game).map(createNumPlayersOption)}\n      </select>\n      <Button onClick={onClick}>Create</Button>\n    </div>\n  );\n}\n\nexport default function Lobby(props) {\n  const {\n    errorMsg,\n    gameComponents,\n    rooms,\n    phase,\n    playerName,\n    runningGame,\n    handleEnterLobby,\n    handleExitLobby,\n    handleCreateRoom,\n    handleJoinRoom,\n    handleLeaveRoom,\n    handleExitRoom,\n    handleRefreshRooms,\n    handleStartGame,\n  } = props;\n\n  const [showNameChooser, setShowNameChooser] = React.useState(\n    playerName == null\n  );\n\n  const [showNewGameForm, setShowNewGameForm] = React.useState(null);\n\n  const handleNameChosen = (name) => {\n    setShowNameChooser(false);\n    handleEnterLobby(name);\n  };\n\n  const nameChosen = playerName !== \"Visitor\";\n\n  return (\n    <Game>\n      <Card title=\"Welcome\">\n        <p>Hi {playerName || \"\"}, Welcome to the Paper Gamer Lobby!</p>\n        {!showNameChooser && (\n          <Button onClick={() => setShowNameChooser(true)}>\n            {nameChosen ? \"Change\" : \"Choose\"} Name\n          </Button>\n        )}\n        {showNameChooser && <NameChooser onEnter={handleNameChosen} />}\n      </Card>\n      {rooms.length > 0 && (\n        <Card title=\"Join a Game\">\n          <ExistingGameChooser\n            rooms={rooms}\n            playerName={playerName}\n            handleJoinRoom={handleJoinRoom}\n            handleLeaveRoom={handleLeaveRoom}\n            handleStartGame={handleStartGame}\n            handleRequestNewGame={() => setShowNewGameForm(true)}\n          />\n        </Card>\n      )}\n      {(showNewGameForm || rooms.length === 0) && (\n        <Card title=\"Create a new Game\">\n          <NewGameCreator\n            games={gameComponents}\n            createGame={handleCreateRoom}\n            onDismiss={() => setShowNewGameForm(false)}\n          />\n        </Card>\n      )}\n    </Game>\n  );\n}\n","import React from \"react\";\nimport RunningGame from \"components/lobby/RunningGame\";\nimport Lobby from \"components/lobby/Lobby\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\"\n  }\n});\n\nexport default function LobbyRenderer(props) {\n  const { runningGame } = props;\n  return (\n    <div className={css(styles.container)}>\n      {runningGame && <RunningGame {...props} />}\n      {!runningGame && <Lobby {...props} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { colors } from \"styles\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  text: {\n    fontFamily: [\"Fredoka One\", \"cursive\"],\n    color: colors.blueLight,\n    padding: 0,\n    margin: 0\n  }\n});\n\nexport default function Logo() {\n  return (\n    <div>\n      <h1 className={css(styles.text)}>Paper Gamer</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Logo from \"components/logo\";\nimport { colors } from \"styles\";\n\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"4px\",\n    paddingBottom: \"4px\",\n    backgroundColor: colors.pinkVeryLight,\n  },\n});\n\nfunction Header() {\n  return (\n    <div className={css(styles.container)}>\n      <Logo />\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Game as TelephoneGame } from \"model/telephone/game\";\nimport { Board as TelephoneBoard } from \"components/telephone/board\";\nimport { Game as SaladbowlGame } from \"model/saladbowl/game\";\nimport { Board as SaladbowlBoard } from \"components/saladbowl/board\";\nimport { Client } from \"boardgame.io/react\";\nimport { Local } from \"boardgame.io/multiplayer\";\nimport LobbyRenderer from \"components/lobby/LobbyRenderer\";\nimport Header from \"components/header\";\nimport { Lobby } from \"boardgame.io/react\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n  container: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  header: {},\n  main: {\n    flexGrow: 1,\n    display: \"relative\",\n  },\n  wrapper: {},\n});\n\n// const SaladbowlClient = Client({\n//   game: SaladbowlGame,\n//   board: SaladbowlBoard,\n//   multiplayer: Local(),\n//   numPlayers: 4,\n// });\n\n// const App = () => (\n//   <div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"0\" />\n//     </div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"1\" />\n//     </div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"2\" />\n//     </div>\n//     <div className={css(styles.wrapper)}>\n//       <SaladbowlClient playerID=\"3\" />\n//     </div>\n//   </div>\n// );\n\nconst importedGames = [\n  // {\n  //   game: TelephoneGame,\n  //   board: TelephoneBoard,\n  // },\n  {\n    game: SaladbowlGame,\n    board: SaladbowlBoard,\n  },\n];\n\nfunction App() {\n  return (\n    <div className={css(styles.container)}>\n      <div className={css(styles.header)}>\n        <Header />\n      </div>\n      <div className={css(styles.main)}>\n        <Lobby\n          gameServer={`https://games-server.oliverwilkie.com`}\n          lobbyServer={`https://games-server.oliverwilkie.com`}\n          gameComponents={importedGames}\n          renderer={LobbyRenderer}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}